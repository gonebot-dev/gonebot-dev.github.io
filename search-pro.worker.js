const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":49,\"nextId\":49,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"3\",\"3\":\"3#configuring-onebotv11-protocol-services\",\"4\":\"3#install-gonebot\",\"5\":\"3@0\",\"6\":\"3@1\",\"7\":\"4\",\"8\":\"4@0\",\"9\":\"5\",\"10\":\"5#start\",\"11\":\"5#_1-start-message-reception\",\"12\":\"5#_2-start-message-sending\",\"13\":\"5#_3-start-behavior-listening\",\"14\":\"5#end\",\"15\":\"5@0\",\"16\":\"5@1\",\"17\":\"6\",\"18\":\"6#adapter-receivechannel-push-msg-true\",\"19\":\"6#adapter-sendchannel-pull-adapter-actionchannel-pull\",\"20\":\"6@0\",\"21\":\"6@1\",\"22\":\"7\",\"23\":\"7@0\",\"24\":\"7@1\",\"25\":\"8\",\"26\":\"8@0\",\"27\":\"9\",\"28\":\"9#introduction\",\"29\":\"9#adapter-behavior-call\",\"30\":\"9@0\",\"31\":\"9@1\",\"32\":\"10\",\"33\":\"10#introduction\",\"34\":\"10#message-construction\",\"35\":\"10#message-sending\",\"36\":\"10@0\",\"37\":\"10@1\",\"38\":\"11\",\"39\":\"11@0\",\"40\":\"11@1\",\"41\":\"12\",\"42\":\"12#introduction\",\"43\":\"12#built-in-rules\",\"44\":\"12#custom-rules\",\"45\":\"12#connecting-rules\",\"46\":\"12@0\",\"47\":\"12@1\",\"48\":\"24\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[2,20],\"3\":[4,118],\"4\":[2,133],\"5\":[null,null,2],\"6\":[null,null,3],\"7\":[1],\"8\":[null,null,1],\"9\":[2,61],\"10\":[1,16],\"11\":[4,39],\"12\":[4,28],\"13\":[4,56],\"14\":[1,59],\"15\":[null,null,1],\"16\":[null,null,3],\"17\":[2,27],\"18\":[1,21],\"19\":[1,28],\"20\":[null,null,1],\"21\":[null,null,2],\"22\":[1,69],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1],\"26\":[null,null,1],\"27\":[2,12],\"28\":[1,111],\"29\":[3,77],\"30\":[null,null,1],\"31\":[null,null,2],\"32\":[2,12],\"33\":[1,142],\"34\":[2,139],\"35\":[2,85],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[3,177],\"39\":[null,null,1],\"40\":[null,null,1],\"41\":[2,12],\"42\":[1,49],\"43\":[3,162],\"44\":[2,52],\"45\":[2,72],\"46\":[null,null,1],\"47\":[null,null,2],\"48\":[1,3]},\"averageFieldLength\":[1.9631023368658136,57.45191073618272,1.2176576352474708],\"storedFields\":{\"0\":{\"h\":\"Documentation\"},\"1\":{\"c\":[\"Documentation\"]},\"2\":{\"h\":\"Quick Start\",\"t\":[\"Tips\",\"You may need to install Golang first.\",\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\"]},\"3\":{\"h\":\"Configuring OneBotV11 Protocol Services\",\"t\":[\"GoneBot currently only supports the OneBotV11 protocol adapter as the adapter has not been fully developed.\",\"We use Lagrange.OneBot as an example of protocol server:\",\"Tips\",\"You may need to go to the link below to install Lagrange.OneBot first.\",\"Lagrange.OneBot 快速部署 & 配置\",\"We will assume that you have already installed it Lagrange.OneBot locally.\",\"After installing Lagrange.OneBot，Start Lagrange.OneBot for the first time and exit immediately after it generates the configuration file. Change the Implementations field in the appsettings.json:\",\"Tips\",\"Don't forget to change the Uin Field in Account Field, filling it with the id of your QQ account for login!\",\"{ ..., \\\"Implementations\\\": [ { \\\"Type\\\": \\\"ReverseWebSocket\\\", \\\"Host\\\": \\\"0.0.0.0\\\", \\\"Port\\\": 25565, \\\"Suffix\\\": \\\"/onebot/v11/ws\\\", \\\"ReconnectInterval\\\": 5000, \\\"HeartBeatInterval\\\": 5000, \\\"AccessToken\\\": \\\"\\\" } ] } \",\"Warning\",\"This configures a reverse websocket, and it will attempt to connect to ws://0.0.0.0:25565/onebot/v11/ws every 5 seconds.\",\"The address and port here are assumed that you are running GoneBot locally and the WebSocket port of the OneBotV11 adapter is configured as 25565, you can modify the specific address and port according to your actual needs.\",\"After the configuration, launch Lagrange.OneBot.\"]},\"4\":{\"h\":\"Install GoneBot\",\"t\":[\"We prepared a simple demo for GoneBot, you can download and run it:\",\"git clone https://github.com/gonebot-dev/gonedemo.git cd gonedemo go run gonedemo \",\"gonedemo is using the .env file below:\",\"ONEBOTV11_HOST=\\\"0.0.0.0:25565\\\" COMMAND_START=\\\"/\\\" NICKNAME=\\\"bot\\\" \",\"As you can see, gonedemo configures the address of websocket to ws://0.0.0.0:25565/onebot/v11/ws. It is consistent with the previous configuration.\",\"After waiting for several seconds, you will see that gonedemo successfully connected to Lagrange.OneBot and output related logs:\",\"Commandline output\",\"If you see logs like above, then congratulations, your first QQ bot configuration is successful!\",\"Tips\",\"gonedemo is using / as the prefix of the command, you can modify it freely, but the related Command rules will be identified with the configuration as the prefix.\",\"The definition of Command rules will be given in later chapters.\",\"gonedemo is configured with Echo 和 Status.\",\"Tips\",\"You can test the Echo and Status plugins by sending /echo and /status to the bot account in private chat.\",\"They will reply the same message as you send, or output the current server status information.\",\"Echo Plugin\",\"Status Plugin\",\"Warning\",\"In local testing, it is possible that Lagrange.OneBot will not be able to send images to the QQ server all the time (it will clearly state the problem in the log), this may not be a problem with GoneBot.\"]},\"5\":{\"c\":[\"Quick Start\"]},\"6\":{\"c\":[\"Installation\",\"Configuration\",\"Running\"]},\"7\":{\"h\":\"Adapter\"},\"8\":{\"c\":[\"Documentation\"]},\"9\":{\"h\":\"Life Cycle\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\",\"In GoneBot Adapter, the lifecycle is very simple, start, and end. That is, the start and destruction of the adapter.\",\"In terms of definition, the adapter needs to implement the Start method and the Finalize method. These two methods do not require any parameters. The Start method will be started by goroutine, and the adapter should start its own business logic in the Start method. The Finalize method will be called when GoneBot is closed, and the adapter should release resources in this method to prevent leakage.\"]},\"10\":{\"h\":\"Start\",\"t\":[\"After the Start method is started, the adapter has some work to do to facilitate GoneBot to work properly:\"]},\"11\":{\"h\":\"1. Start message reception\",\"t\":[\" The adapter should receive messages from the chat platform in its own way, convert the messages to the Message type specified by GoneBot, and use ReceiveChannel.Push(msg, true) to put the message into the adapter's message reception queue. GoneBot will take the message from this queue and pass it to the plugin.\"]},\"12\":{\"h\":\"2. Start message sending\",\"t\":[\" After the plugin is processed, the plugin's reply will be pushed into the adapter's send message queue SendChannel, and the adapter needs to send these replies to the chat platform in its own way.\"]},\"13\":{\"h\":\"3. Start behavior listening\",\"t\":[\" If the chat platform implements some custom behavior (such as QQ's poke), the plugin may generate some behavior calls, GoneBot will put these calls into the adapter's ActionChannel, and the adapter needs to handle these behaviors and put the processing results into the ResultChannel specified by the ActionCall.\",\"Warning\",\"Regardless of the result of the call, you need to push at least one result into ResultChannel, otherwise the plugin that calls the behavior will be stuck in place!\",\"I warn you! 🫵🫵🫵\"]},\"14\":{\"h\":\"End\",\"t\":[\"When GoneBot is closed, the Finalize method of all adapters will be called in turn. The adapter should release all resources in this method to prevent leakage.\",\"Warning\",\"But this does not mean you can block the thread at will! Otherwise, it will cause GoneBot to be unable to close properly!\",\"Tips\",\"Until version v1.1.4, GoneBot cannot exit properly when the user uses Ctrl+C. In the subsequent versions, GoneBot will try to fix this problem.\"]},\"15\":{\"c\":[\"Documentation\"]},\"16\":{\"c\":[\"Adapter\",\"Life Cycle\"]},\"17\":{\"h\":\"Common Methods\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\",\"In this chapter, some commonly used methods in adapters are summarized.\",\"They are really so few!\"]},\"18\":{\"h\":\"\",\"t\":[\"It will receive a message from the ReceiveChannel and normalize it, and then call adapter.SendChannel.Push(msg, true) to push it to the SendChannel.\"]},\"19\":{\"h\":\",\",\"t\":[\"They will pull a message or action from the SendChannel or ActionChannel respectively, normalize it, and then return it. They will not return until a message or action is received.\",\"Oh shoot, that's all of it?\"]},\"20\":{\"c\":[\"Documentation\"]},\"21\":{\"c\":[\"Adapter\",\"Methods\"]},\"22\":{\"h\":\"Preface\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\",\"It is because of the diversity of the platform, the behavior of the adapter may be very different, so GoneBot can not give a completely strict and controllable standard for the adapter, only give a general specification, the specific implementation is still up to the developer to decide. If you encounter an adapter that is very unstable but must be used, you may need to try to solve it by yourself.\",\"Please continue to the next section to learn about the development requirements for the adapter.\"]},\"23\":{\"c\":[\"Documentation\"]},\"24\":{\"c\":[\"Adapter\"]},\"25\":{\"h\":\"Plugin\"},\"26\":{\"c\":[\"Documentation\"]},\"27\":{\"h\":\"Adapter Actions\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\"]},\"28\":{\"h\":\"Introduction\",\"t\":[\"For adapters, they may define behaviors specific to a platform (such as QQ pokes, merge forwards, etc.), which cannot be represented by message types, but they exist and may be very useful, so GoneBot also created corresponding interfaces, and responders can try to let the adapter execute it defined behavior.\",\"The interface definition of adapter behavior is as follows:\",\"// If you want to call adapter action, you should use this struct type ActionCall struct { // Which action Action any // Which channel to push the result, will initialize automatically ResultChannel *chan any } \",\"For adapters, we provide the CallAction method to call the adapter behavior:\",\"func (a *Adapter) CallAction(action any) (result any) { act := message.ActionCall{Action: action} resultChannel := make(chan any, 1) act.ResultChannel = &resultChannel a.ActionChannel.Push(&act) return <-resultChannel } \",\"Tips\",\"If adapter does not return result to resultChannel, CallAction will be blocked and stuck in the current responder, if you find this situation, please check whether the Action you call is correct.\",\"If it is actually a problem with the adapter, Man! What can I say.\"]},\"29\":{\"h\":\"Adapter behavior call\",\"t\":[\"In the case that the adapter has implemented the corresponding behavior, you can use the CallAction method to call it.\",\"For example, in the OneBotV11 adapter, you can call the CallAction method to send a private message when the user sends a text containing test to the robot:\",\"// ... var ActionTrial plugin.GonePlugin func init() { ActionTrial.Name = \\\"Action Trial\\\" ActionTrial.Version = \\\"v0.0.1\\\" ActionTrial.Description = \\\"A plugin for testing actions\\\" ActionTrial.Handlers = append(ActionTrial.Handlers, plugin.GoneHandler{ Rules: rule.NewRules(rule.ToMe()).And(rule.Keyword(false, \\\"test\\\")), Handler: func(a *adapter.Adapter, msg message.Message) bool { a.CallAction(onebotv11.SendPrivateMessage{ UserID: 114514, Message: message.NewReply(msg).Text(\\\"Hello!\\\").GetSegments(), }) return true }, }) } \"]},\"30\":{\"c\":[\"Documentation\"]},\"31\":{\"c\":[\"Plugin\",\"Actions\"]},\"32\":{\"h\":\"Message Types\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\"]},\"33\":{\"h\":\"Introduction\",\"t\":[\"Messages are the most important part of chatbots, and all logic is based on message processing, so understanding message types is very important when writing plugins.\",\"In GoneBot, we split a message into several message segments, each of which represents a special type of message, such as text, image, etc.\",\"In GoneBot, the definition of message types is as follows:\",\"// This describes a simple part of a message type MessageSegment struct { // Message type Type string `json:\\\"type\\\"` // Make sure it implements MessageType interface Data MessageType `json:\\\"data\\\"` } // Implement this to create a message type type MessageType interface { // Which adapter is this message for AdapterName() string // Which message type is this message for TypeName() string // Convert this message segment to raw text ToRawText(msg MessageSegment) string } // This describes the whole message type Message struct { // Is the message to me? IsToMe bool // Which group is it in?(Only useful with group message and notice) Group string // Who is sending this message? Sender string // Who is receiving this message? Receiver string // Who am i? Self string // All the message segments segments []MessageSegment // All the text segments are added together rawText string } \",\"Among them, segments and rawText cannot be modified directly for you, you need to read them through GetSegments() and GetRawText().\",\"MessageType defines the method of message type, and for a message type, it is important to know which adapter it belongs to (each adapter may implement different message types), its type name, and how it is converted to plain text (for message filtering, etc.).\",\"Warning\",\"After this, the messages received are all given by the adapter, so you don't need to care about where the message comes from, but only about the specific content of the message.\"]},\"34\":{\"h\":\"Message Construction\",\"t\":[\"The construction method of messages is similar to Rules, you can use message.NewReply() to quickly create an empty reply to a message, or use message.NewMessage() to create a new message.\",\"Tips\",\"When using message.NewMessage(), you may miss some fields that need to be specified. Therefore, it is not recommended to use message.NewMessage() before you are completely sure.\",\"GoneBot has built-in some simple and common message types:\",\"// Text attachs a plain text message segment to message func (m *Message) Text(text string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"text\\\", Data: TextType{ Text: \\\"Hello, world!\\\", }, }) return m } // Image attachs an image message segment to message func (m *Message) Image(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"image\\\", Data: ImageType{ File: file, }, }) return m } // Voice attachs a voice message segment to message func (m *Message) Voice(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"voice\\\", Data: VoiceType{ File: file, }, }) return m } // Video attachs a video message segment to message func (m *Message) Video(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"video\\\", Data: VideoType{ File: file, }, }) return m } // File attachs a file message segment to message func (m *Message) File(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"file\\\", Data: FileType{ File: file, }, }) return m } \",\"You can use these methods to quickly add text, image, voice, video, and file messages to the message:\",\"reply := message.NewReply(msg). Text(\\\"Hello, world!\\\"). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") \",\"Like above, you can quickly create a reply that contains both text and images.\",\"Of course, for the message type defined by the adapter, GoneBot naturally does not have the corresponding addition method, but you can add any message type using Any():\",\"For example, add a qq emoji to the message just now:\",\"reply := message.NewReply(msg). Text(\\\"Hello, world!\\\"). Any(onebotv11.FaceType{ ID: 123 }). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") \",\"If you already have two message bodies, and you want to concatenate them together, you can use Join() to connect the two messages together:\",\"reply := message.NewReply(msg).Join(msg) \",\"This will create a reply that is exactly the same as the original message.\"]},\"35\":{\"h\":\"Message Sending\",\"t\":[\"When you have constructed a message, you always want to send it out. In the Handler, GoneBot will pass in the adapter pointer, and you can judge the type of adapter and send messages through it:\",\"Handler: func (a *adapter.Adapter, msg message.Message) bool { var reply *message.Message if a.Name == onebotv11.OneBotV11.Name { reply = message.NewReply(msg). Text(\\\"Hello, world!\\\"). Any(onebotv11.FaceType{ ID: 123 }). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") } else { reply = message.NewReply(msg).join(msg) } a.SendMessage(reply) a.SendMessage(reply) a.SendMessage(reply) return true } \",\"Tips\",\"You may find that the above code wrote a.SendMessage(reply) three times.\",\"The plugins should be able to reply to multiple messages, why not?\",\"So does the CallAction() in Adapter Actions.\"]},\"36\":{\"c\":[\"Documentation\"]},\"37\":{\"c\":[\"Plugin\",\"Message\"]},\"38\":{\"h\":\"Your First Plugin\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\",\"Here, we take the Echo plugin as an example:\",\"The main body of the plugin is a plugin.GonePlugin type, you can define it globally using CamelCase and determine the specific content of its fields in the init() method:\",\"package echo import ( \\\"github.com/gonebot-dev/gonebot/plugin\\\" ) var Echo plugin.GonePlugin func init() { Echo.Name = \\\"Echo\\\" Echo.Version = \\\"v0.1.1\\\" Echo.Description = \\\"Computer speaks\\\" } \",\"Next, we need to define the Handlers field of the plugin, which is a []plugin.GoneHandler type, containing one or more plugin.GoneHandler type elements:\",\"Echo plugin only needs one plugin.GoneHandler, in plugin.GoneHandler, we need to define the Rule and Handler fields of the handler, respectively representing the message screening rules and response functions of the handler:\",\"package echo import ( \\\"github.com/gonebot-dev/gonebot/adapter\\\" \\\"github.com/gonebot-dev/gonebot/message\\\" \\\"github.com/gonebot-dev/gonebot/plugin\\\" \\\"github.com/gonebot-dev/gonebot/plugin/rule\\\" ) var Echo plugin.GonePlugin func init() { Echo.Name = \\\"Echo\\\" Echo.Version = \\\"v0.1.1\\\" Echo.Description = \\\"Reply the same message of what you have sent\\\" Echo.Handlers = append(Echo.Handlers, plugin.GoneHandler{ Rules: rule.NewRules(rule.ToMe()).And(rule.Command(\\\"echo\\\")), Handler: func(a *adapter.Adapter, msg message.Message) bool { reply := message.NewReply(msg).Join(msg) a.SendMessage(reply) return true }, }) } \",\"Firstly, let's take a look at the Rules field:\",\"Rules: rule.NewRules(rule.ToMe()).And(rule.Command(\\\"echo\\\")) \",\"The Rules field can be composed of several rules, and each rule can specify a logical relationship between them. The message received will be passed to the handler only if it meets the rules in Rules.\",\"The specific introduction of Rules field is given in Handler Rules.\",\"Next is the Handler field:\",\"Handler: func(a *adapter.Adapter, msg message.Message) bool { reply := message.NewReply(msg).Join(msg) a.SendMessage(reply) return true } \",\"The Handler field is a func(a *adapter.Adapter, msg message.Message) bool that receives two parameters: the adapter that received the current message and the content of the current received message, and it returns a bool value, indicating whether the message is passed to the next handler after the handler has processed the message.\",\"Tips\",\"The response order of the handler is related to the loading order of the plugin and the writing order of plugin.GoneHandler in the plugin, the earlier the order, the earlier the response.\",\"You can use message.NewReply() quickly to create an empty response, in Echo, the plugin needs to return the content of the original message completely, you can use Join() to merge the content of the message into the response.\",\"After that, you can call a.SendMessage to pass the response to the adapter for processing.\",\"Tips\",\"handlers can do more than that! Go to Message Types and Adapter Actions to learn more!\",\"Now, you should have completed the writing of your first plugin, congratulations! Next, you can go to learn more about Handler Rules, Message Types and Adapter Actions in detail!\"]},\"39\":{\"c\":[\"Documentation\"]},\"40\":{\"c\":[\"Plugin\"]},\"41\":{\"h\":\"Handler Rules\",\"t\":[\"Warning\",\"When writing this document, the GoneBot version was v1.1.4\"]},\"42\":{\"h\":\"Introduction\",\"t\":[\"The way of writing rules in GoneBot is very simple, but it is still very powerful and can meet various complex rule requirements.\",\"You can use rule.NewRule() to create a new response rule group, you must specify the first rule for the rule group, if you don't need to add rules, you can use rule.NewRule(rule.Always()) to make the responder always respond to the received messages.\"]},\"43\":{\"h\":\"Built-in Rules\",\"t\":[\"GoneBot provides a set of built-in rules that you can use directly to create rule groups:\",\"rule.Always() always returns true, that is, always respond to the received messages.\",\"// Always always returns true func Always() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return true }, } } \",\"rule.Never() always returns false, that is, never respond to the received messages.\",\"// Never never returns true func Never() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return false }, } } \",\"rule.Command() returns true when the message starts with COMMAND_START plus any of the specified commands.\",\"func Command(prefixList ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, prefix := range prefixList { if strings.HasPrefix( msg.GetRawText(), configurations.GetConf(\\\"COMMAND_START\\\")+prefix, ) { return true } } return false }, } } \",\"Tips\",\"COMMAND_START is specified in the .env file, the default is /\",\"You can add multiple prefixes to prefixList, and the responder will respond to the message if it starts with COMMAND_START plus any of the specified prefixes.\",\"rule.FullMatch() returns true when the message matches any of the specified strings.\",\"func FullMatch(strs ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, str := range strs { if str == msg.GetRawText() { return true } } return false }, } } \",\"rule.Keyword() returns true when the message contains any of the specified strings.\",\"If forceStart is true, the specified string must be at the beginning of the message.\",\"func Keyword(forceStart bool, keywords ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, keyword := range keywords { if forceStart && strings.HasPrefix(msg.GetRawText(), keyword) { return true } if !forceStart && strings.Contains(msg.GetRawText(), keyword) { return true } } return false }, } } \",\"rule.RegEx() allows you to pass in several regular expression strings, and if the message matches any of them, it will return true.\",\"Also, regular expressions may compile errors, in order to get clearer error information, you need to pass in the plugin name to mark the plugin that uses this rule.\",\"func RegEx(pluginName string, exprs ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, expr := range exprs { reg, err := regexp.Compile(expr) if err != nil { log.Printf(\\\"[GONEBOT] | %s: RegEx filter rule compilation error!\\\\n\\\", pluginName) return false } if reg.FindStringIndex(msg.GetRawText()) != nil { return true } } return false }, } } \",\"rule.ToMe() returns true when the IsToMe field in the message body is true.\",\"func ToMe() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return msg.IsToMe }, } } \",\"Tips\",\"IsToMe is determined by the adapter, for example, in the QQ robot, if the message starts with @robotQQ or there is an event targeting the robot (such as a poke), IsToMe is true.\",\"rule.OfType() returns true when the Type field and AdapterName field of the first segment of the message body match the specified strings.\",\"func OfType(typeName, adapterName string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { return msg.GetSegments()[0].Type == typeName && msg.GetSegments()[0].Data.AdapterName() == adapterName }, } } \",\"rule.Notice() returns true when the message contains any of the specified types.\",\"func Notice(typeList ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, typeName := range typeList { for _, segment := range msg.GetSegments() { if segment.Type == typeName { return true } } } return false }, } } \"]},\"44\":{\"h\":\"Custom Rules\",\"t\":[\"If the built-in rules do not meet your requirements, you can customize rules by creating a new *rule.Rule type like this:\",\"Rules: rule.NewRule(rule.IsToMe()).And(&rule.Rule{ Filter: func(msg message.Message) bool { if strings.HasSuffix(msg.GetRawText(), \\\"miao~\\\") { return true } return false } }) \",\"This creates a rule that checks if the end of the message is miao~, and only triggers when the message is IsToMe.\"]},\"45\":{\"h\":\"Connecting Rules\",\"t\":[\"rule.NewRule() creates a rule block, which can contain multiple rules, which can be connected using And() and Or(), and the rules will be calculated in the order of connection, and the result will be obtained at the end.\",\"If you need to connect multiple rules, you can use rule.AndRules() and rule.OrRules() to connect a new rule block, the calculation rules are the same.\",\"For example, you need your robot to respond to @self and contain 111 messages, or to respond to your own poke messages:\",\"Rules: rule.NewRule(rule.IsToMe()).And(rule.Keyword(false, \\\"111\\\")). AndRules(rule.NewRule(rule.IsToMe()).And(rule.Notice(\\\"group_poke\\\", \\\"friend_poke\\\"))) \",\"Tips\",\"Rules connected like this may be quite long, and you can insert more line breaks to make it easier to read.\"]},\"46\":{\"c\":[\"Documentation\"]},\"47\":{\"c\":[\"Plugin\",\"Rules\"]},\"48\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"|\",{\"1\":{\"43\":1}}],[\"+prefix\",{\"1\":{\"43\":1}}],[\"judge\",{\"1\":{\"35\":1}}],[\"just\",{\"1\":{\"34\":1}}],[\"join\",{\"1\":{\"34\":2,\"35\":1,\"38\":3}}],[\"json\",{\"1\":{\"3\":1}}],[\"know\",{\"1\":{\"33\":1}}],[\"keywords\",{\"1\":{\"43\":2}}],[\"keyword\",{\"1\":{\"29\":1,\"43\":5,\"45\":1}}],[\"`\",{\"1\":{\"33\":2}}],[\"`json\",{\"1\":{\"33\":2}}],[\"<\",{\"1\":{\"28\":1}}],[\"==\",{\"1\":{\"35\":1,\"43\":4}}],[\"=\",{\"1\":{\"28\":3,\"29\":4,\"34\":3,\"35\":2,\"38\":9,\"43\":9}}],[\"🫵🫵🫵\",{\"1\":{\"13\":1}}],[\"3\",{\"0\":{\"13\":1}}],[\"2\",{\"0\":{\"12\":1}}],[\"25565\",{\"1\":{\"3\":3,\"4\":2}}],[\"和\",{\"1\":{\"4\":1}}],[\"breaks\",{\"1\":{\"45\":1}}],[\"based\",{\"1\":{\"33\":1}}],[\"body\",{\"1\":{\"38\":1,\"43\":2}}],[\"bodies\",{\"1\":{\"34\":1}}],[\"bool\",{\"1\":{\"29\":1,\"33\":1,\"35\":1,\"38\":4,\"43\":10,\"44\":1}}],[\"both\",{\"1\":{\"34\":1}}],[\"bot\",{\"1\":{\"4\":3}}],[\"blocked\",{\"1\":{\"28\":1}}],[\"block\",{\"1\":{\"14\":1,\"45\":2}}],[\"built\",{\"0\":{\"43\":1},\"1\":{\"34\":1,\"43\":1,\"44\":1}}],[\"business\",{\"1\":{\"9\":1}}],[\"but\",{\"1\":{\"4\":1,\"14\":1,\"22\":1,\"28\":1,\"33\":1,\"34\":1,\"42\":1}}],[\"by\",{\"1\":{\"4\":1,\"9\":1,\"11\":1,\"13\":1,\"22\":1,\"28\":1,\"33\":1,\"34\":1,\"43\":1,\"44\":1}}],[\"beginning\",{\"1\":{\"43\":1}}],[\"between\",{\"1\":{\"38\":1}}],[\"before\",{\"1\":{\"34\":1}}],[\"belongs\",{\"1\":{\"33\":1}}],[\"below\",{\"1\":{\"3\":1,\"4\":1}}],[\"because\",{\"1\":{\"22\":1}}],[\"behaviors\",{\"1\":{\"13\":1,\"28\":1}}],[\"behavior\",{\"0\":{\"13\":1,\"29\":1},\"1\":{\"13\":3,\"22\":1,\"28\":3,\"29\":1}}],[\"be\",{\"1\":{\"4\":4,\"9\":2,\"12\":1,\"13\":1,\"14\":2,\"22\":2,\"28\":3,\"33\":1,\"34\":1,\"35\":1,\"38\":2,\"43\":1,\"45\":4}}],[\"been\",{\"1\":{\"3\":1}}],[\"miao~\",{\"1\":{\"44\":2}}],[\"miss\",{\"1\":{\"34\":1}}],[\"multiple\",{\"1\":{\"35\":1,\"43\":1,\"45\":2}}],[\"must\",{\"1\":{\"22\":1,\"42\":1,\"43\":1}}],[\"m\",{\"1\":{\"34\":15}}],[\"more\",{\"1\":{\"38\":4,\"45\":1}}],[\"modified\",{\"1\":{\"33\":1}}],[\"modify\",{\"1\":{\"3\":1,\"4\":1}}],[\"most\",{\"1\":{\"33\":1}}],[\"match\",{\"1\":{\"43\":1}}],[\"matches\",{\"1\":{\"43\":2}}],[\"mark\",{\"1\":{\"43\":1}}],[\"main\",{\"1\":{\"38\":1}}],[\"man\",{\"1\":{\"28\":1}}],[\"make\",{\"1\":{\"28\":1,\"33\":1,\"42\":1,\"45\":1}}],[\"may\",{\"1\":{\"2\":1,\"3\":1,\"4\":1,\"13\":1,\"22\":2,\"28\":2,\"33\":1,\"34\":1,\"35\":1,\"43\":1,\"45\":1}}],[\"msg\",{\"1\":{\"11\":1,\"18\":1,\"29\":2,\"33\":1,\"34\":4,\"35\":4,\"38\":7,\"43\":18,\"44\":2}}],[\"meet\",{\"1\":{\"42\":1,\"44\":1}}],[\"meets\",{\"1\":{\"38\":1}}],[\"me\",{\"1\":{\"33\":1}}],[\"merge\",{\"1\":{\"28\":1,\"38\":1}}],[\"mean\",{\"1\":{\"14\":1}}],[\"methods\",{\"0\":{\"17\":1},\"1\":{\"9\":1,\"17\":1,\"34\":1},\"2\":{\"21\":1}}],[\"method\",{\"1\":{\"9\":6,\"10\":1,\"14\":2,\"28\":1,\"29\":2,\"33\":1,\"34\":2,\"38\":1}}],[\"messagetype\",{\"1\":{\"33\":4}}],[\"messagesegment\",{\"1\":{\"33\":3,\"34\":5}}],[\"messages\",{\"1\":{\"11\":2,\"33\":2,\"34\":3,\"35\":2,\"42\":1,\"43\":2,\"45\":2}}],[\"message\",{\"0\":{\"11\":1,\"12\":1,\"32\":1,\"34\":1,\"35\":1},\"1\":{\"4\":1,\"11\":4,\"12\":1,\"18\":1,\"19\":2,\"28\":2,\"29\":5,\"33\":26,\"34\":36,\"35\":7,\"38\":21,\"43\":28,\"44\":4},\"2\":{\"37\":1}}],[\"range\",{\"1\":{\"43\":6}}],[\"rawtext\",{\"1\":{\"33\":2}}],[\"raw\",{\"1\":{\"33\":1}}],[\"robotqq\",{\"1\":{\"43\":1}}],[\"robot\",{\"1\":{\"29\":1,\"43\":2,\"45\":1}}],[\"rule\",{\"1\":{\"29\":3,\"38\":9,\"42\":7,\"43\":30,\"44\":7,\"45\":11}}],[\"rules\",{\"0\":{\"41\":1,\"43\":1,\"44\":1,\"45\":1},\"1\":{\"4\":2,\"29\":1,\"34\":1,\"38\":11,\"42\":2,\"43\":1,\"44\":3,\"45\":6},\"2\":{\"47\":1}}],[\"run\",{\"1\":{\"4\":2}}],[\"running\",{\"1\":{\"3\":1},\"2\":{\"6\":1}}],[\"reg\",{\"1\":{\"43\":2}}],[\"regular\",{\"1\":{\"43\":2}}],[\"regexp\",{\"1\":{\"43\":1}}],[\"regex\",{\"1\":{\"43\":3}}],[\"regardless\",{\"1\":{\"13\":1}}],[\"read\",{\"1\":{\"33\":1,\"45\":1}}],[\"really\",{\"1\":{\"17\":1}}],[\"representing\",{\"1\":{\"38\":1}}],[\"represents\",{\"1\":{\"33\":1}}],[\"represented\",{\"1\":{\"28\":1}}],[\"replies\",{\"1\":{\"12\":1}}],[\"reply\",{\"1\":{\"4\":1,\"12\":1,\"34\":6,\"35\":8,\"38\":5}}],[\"returns\",{\"1\":{\"38\":1,\"43\":10}}],[\"return\",{\"1\":{\"19\":2,\"28\":2,\"29\":1,\"34\":5,\"35\":1,\"38\":3,\"43\":26,\"44\":2}}],[\"respond\",{\"1\":{\"42\":1,\"43\":3,\"45\":2}}],[\"responder\",{\"1\":{\"28\":1,\"42\":1,\"43\":1}}],[\"responders\",{\"1\":{\"28\":1}}],[\"response\",{\"1\":{\"38\":6,\"42\":1}}],[\"respectively\",{\"1\":{\"19\":1,\"38\":1}}],[\"result\",{\"1\":{\"13\":2,\"28\":3,\"45\":1}}],[\"resultchannel\",{\"1\":{\"13\":2,\"28\":6}}],[\"results\",{\"1\":{\"13\":1}}],[\"resources\",{\"1\":{\"9\":1,\"14\":1}}],[\"recommended\",{\"1\":{\"34\":1}}],[\"reconnectinterval\",{\"1\":{\"3\":1}}],[\"receiving\",{\"1\":{\"33\":1}}],[\"receives\",{\"1\":{\"38\":1}}],[\"receiver\",{\"1\":{\"33\":1}}],[\"received\",{\"1\":{\"19\":1,\"33\":1,\"38\":3,\"42\":1,\"43\":2}}],[\"receivechannel\",{\"1\":{\"11\":1,\"18\":1}}],[\"receive\",{\"1\":{\"11\":1,\"18\":1}}],[\"reception\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"relationship\",{\"1\":{\"38\":1}}],[\"related\",{\"1\":{\"4\":2,\"38\":1}}],[\"release\",{\"1\":{\"9\":1,\"14\":1}}],[\"requirements\",{\"1\":{\"22\":1,\"42\":1,\"44\":1}}],[\"require\",{\"1\":{\"9\":1}}],[\"reverse\",{\"1\":{\"3\":1}}],[\"reversewebsocket\",{\"1\":{\"3\":1}}],[\"5\",{\"1\":{\"3\":1}}],[\"5000\",{\"1\":{\"3\":2}}],[\"event\",{\"1\":{\"43\":1}}],[\"every\",{\"1\":{\"3\":1}}],[\"err\",{\"1\":{\"43\":2}}],[\"error\",{\"1\":{\"43\":2}}],[\"errors\",{\"1\":{\"43\":1}}],[\"easier\",{\"1\":{\"45\":1}}],[\"earlier\",{\"1\":{\"38\":2}}],[\"each\",{\"1\":{\"33\":2,\"38\":1}}],[\"elements\",{\"1\":{\"38\":1}}],[\"else\",{\"1\":{\"35\":1}}],[\"emoji\",{\"1\":{\"34\":1}}],[\"empty\",{\"1\":{\"34\":1,\"38\":1}}],[\"ecosystem\",{\"1\":{\"34\":2,\"35\":1}}],[\"echo\",{\"1\":{\"4\":4,\"38\":19}}],[\"etc\",{\"1\":{\"28\":1,\"33\":2}}],[\"encounter\",{\"1\":{\"22\":1}}],[\"end\",{\"0\":{\"14\":1},\"1\":{\"9\":1,\"44\":1,\"45\":1}}],[\"env\",{\"1\":{\"4\":1,\"43\":1}}],[\"expr\",{\"1\":{\"43\":2}}],[\"exprs\",{\"1\":{\"43\":2}}],[\"expressions\",{\"1\":{\"43\":1}}],[\"expression\",{\"1\":{\"43\":1}}],[\"exactly\",{\"1\":{\"34\":1}}],[\"example\",{\"1\":{\"3\":1,\"29\":1,\"34\":1,\"38\":1,\"43\":1,\"45\":1}}],[\"execute\",{\"1\":{\"28\":1}}],[\"exist\",{\"1\":{\"28\":1}}],[\"exit\",{\"1\":{\"3\":1,\"14\":1}}],[\"png\",{\"1\":{\"34\":2,\"35\":1}}],[\"package\",{\"1\":{\"38\":2}}],[\"part\",{\"1\":{\"33\":2}}],[\"parameters\",{\"1\":{\"9\":1,\"38\":1}}],[\"passed\",{\"1\":{\"38\":2}}],[\"pass\",{\"1\":{\"11\":1,\"35\":1,\"38\":1,\"43\":2}}],[\"pull\",{\"1\":{\"19\":1}}],[\"put\",{\"1\":{\"11\":1,\"13\":2}}],[\"pushed\",{\"1\":{\"12\":1}}],[\"push\",{\"1\":{\"11\":1,\"13\":1,\"18\":2,\"28\":2}}],[\"plus\",{\"1\":{\"43\":2}}],[\"pluginname\",{\"1\":{\"43\":2}}],[\"plugin\",{\"0\":{\"25\":1,\"38\":1},\"1\":{\"4\":2,\"11\":1,\"12\":2,\"13\":2,\"29\":3,\"38\":20,\"43\":2},\"2\":{\"31\":1,\"37\":1,\"40\":1,\"47\":1}}],[\"plugins\",{\"1\":{\"4\":1,\"33\":1,\"35\":1}}],[\"please\",{\"1\":{\"22\":1,\"28\":1}}],[\"plain\",{\"1\":{\"33\":1,\"34\":1}}],[\"place\",{\"1\":{\"13\":1}}],[\"platform\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"22\":1,\"28\":1}}],[\"powerful\",{\"1\":{\"42\":1}}],[\"pointer\",{\"1\":{\"35\":1}}],[\"pokes\",{\"1\":{\"28\":1}}],[\"poke\",{\"1\":{\"13\":1,\"43\":1,\"45\":3}}],[\"possible\",{\"1\":{\"4\":1}}],[\"port\",{\"1\":{\"3\":4}}],[\"printf\",{\"1\":{\"43\":1}}],[\"private\",{\"1\":{\"4\":1,\"29\":1}}],[\"provides\",{\"1\":{\"43\":1}}],[\"provide\",{\"1\":{\"28\":1}}],[\"processing\",{\"1\":{\"13\":1,\"33\":1,\"38\":1}}],[\"processed\",{\"1\":{\"12\":1,\"38\":1}}],[\"properly\",{\"1\":{\"10\":1,\"14\":2}}],[\"problem\",{\"1\":{\"4\":2,\"14\":1,\"28\":1}}],[\"protocol\",{\"0\":{\"3\":1},\"1\":{\"3\":2}}],[\"press\",{\"1\":{\"34\":2,\"35\":1}}],[\"preface\",{\"0\":{\"22\":1}}],[\"prefixes\",{\"1\":{\"43\":2}}],[\"prefixlist\",{\"1\":{\"43\":3}}],[\"prefix\",{\"1\":{\"4\":2,\"43\":1}}],[\"prevent\",{\"1\":{\"9\":1,\"14\":1}}],[\"previous\",{\"1\":{\"4\":1}}],[\"prepared\",{\"1\":{\"4\":1}}],[\"0\",{\"1\":{\"3\":8,\"4\":8,\"29\":1,\"43\":2}}],[\"how\",{\"1\":{\"33\":1}}],[\"host=\",{\"1\":{\"4\":1}}],[\"host\",{\"1\":{\"3\":1}}],[\"https\",{\"1\":{\"4\":1,\"34\":2,\"35\":1}}],[\"hero\",{\"1\":{\"34\":2,\"35\":1}}],[\"here\",{\"1\":{\"3\":1,\"38\":1}}],[\"hello\",{\"1\":{\"29\":1,\"34\":3,\"35\":1}}],[\"heartbeatinterval\",{\"1\":{\"3\":1}}],[\"handler\",{\"0\":{\"41\":1},\"1\":{\"29\":1,\"35\":2,\"38\":13}}],[\"handlers\",{\"1\":{\"29\":2,\"38\":4}}],[\"handle\",{\"1\":{\"13\":1}}],[\"have\",{\"1\":{\"3\":1,\"34\":2,\"35\":1,\"38\":2}}],[\"hassuffix\",{\"1\":{\"44\":1}}],[\"hasprefix\",{\"1\":{\"43\":2}}],[\"has\",{\"1\":{\"3\":1,\"10\":1,\"29\":1,\"34\":1,\"38\":1}}],[\"quite\",{\"1\":{\"45\":1}}],[\"quickly\",{\"1\":{\"34\":3,\"38\":1}}],[\"quick\",{\"0\":{\"2\":1},\"2\":{\"5\":1}}],[\"queue\",{\"1\":{\"11\":2,\"12\":1}}],[\"qq\",{\"1\":{\"3\":1,\"4\":2,\"13\":1,\"28\":1,\"34\":1,\"43\":1}}],[\"up\",{\"1\":{\"22\":1}}],[\"understanding\",{\"1\":{\"33\":1}}],[\"unstable\",{\"1\":{\"22\":1}}],[\"until\",{\"1\":{\"14\":1,\"19\":1}}],[\"unable\",{\"1\":{\"14\":1}}],[\"using\",{\"1\":{\"4\":2,\"34\":2,\"38\":1,\"45\":1}}],[\"useful\",{\"1\":{\"28\":1,\"33\":1}}],[\"used\",{\"1\":{\"17\":1,\"22\":1}}],[\"uses\",{\"1\":{\"14\":1,\"43\":1}}],[\"userid\",{\"1\":{\"29\":1}}],[\"user\",{\"1\":{\"14\":1,\"29\":1}}],[\"use\",{\"1\":{\"3\":1,\"11\":1,\"28\":1,\"29\":1,\"34\":5,\"38\":2,\"42\":2,\"43\":1,\"45\":1}}],[\"uin\",{\"1\":{\"3\":1}}],[\"globally\",{\"1\":{\"38\":1}}],[\"groups\",{\"1\":{\"43\":1}}],[\"group\",{\"1\":{\"33\":3,\"42\":2,\"45\":1}}],[\"get\",{\"1\":{\"43\":1}}],[\"getconf\",{\"1\":{\"43\":1}}],[\"getrawtext\",{\"1\":{\"33\":1,\"43\":5,\"44\":1}}],[\"getsegments\",{\"1\":{\"29\":1,\"33\":1,\"43\":3}}],[\"general\",{\"1\":{\"22\":1}}],[\"generate\",{\"1\":{\"13\":1}}],[\"generates\",{\"1\":{\"3\":1}}],[\"give\",{\"1\":{\"22\":2}}],[\"given\",{\"1\":{\"4\":1,\"33\":1,\"38\":1}}],[\"github\",{\"1\":{\"4\":1,\"38\":5}}],[\"git\",{\"1\":{\"4\":2}}],[\"goroutine\",{\"1\":{\"9\":1}}],[\"gonehandler\",{\"1\":{\"29\":1,\"38\":6}}],[\"goneplugin\",{\"1\":{\"29\":1,\"38\":3}}],[\"gonedemo\",{\"1\":{\"4\":8}}],[\"gonebot\",{\"0\":{\"4\":1},\"1\":{\"2\":1,\"3\":2,\"4\":3,\"9\":3,\"10\":1,\"11\":2,\"13\":1,\"14\":4,\"17\":1,\"22\":2,\"27\":1,\"28\":1,\"32\":1,\"33\":2,\"34\":2,\"35\":1,\"38\":11,\"41\":1,\"42\":1,\"43\":2}}],[\"go\",{\"1\":{\"3\":1,\"4\":1,\"38\":2}}],[\"golang\",{\"1\":{\"2\":1}}],[\"i\",{\"1\":{\"13\":1,\"28\":1,\"33\":1}}],[\"if\",{\"1\":{\"4\":1,\"13\":1,\"22\":1,\"28\":4,\"34\":1,\"35\":1,\"38\":1,\"42\":1,\"43\":11,\"44\":3,\"45\":1}}],[\"istome\",{\"1\":{\"33\":1,\"43\":4,\"44\":2,\"45\":2}}],[\"is\",{\"1\":{\"3\":1,\"4\":6,\"9\":3,\"10\":1,\"12\":1,\"14\":1,\"19\":1,\"22\":3,\"28\":3,\"33\":11,\"34\":3,\"38\":7,\"42\":2,\"43\":9,\"44\":2}}],[\"identified\",{\"1\":{\"4\":1}}],[\"id\",{\"1\":{\"3\":1,\"34\":1,\"35\":1}}],[\"insert\",{\"1\":{\"45\":1}}],[\"installation\",{\"2\":{\"6\":1}}],[\"installing\",{\"1\":{\"3\":1}}],[\"installed\",{\"1\":{\"3\":1}}],[\"install\",{\"0\":{\"4\":1},\"1\":{\"2\":1,\"3\":1}}],[\"indicating\",{\"1\":{\"38\":1}}],[\"init\",{\"1\":{\"29\":1,\"38\":3}}],[\"initialize\",{\"1\":{\"28\":1}}],[\"interface\",{\"1\":{\"28\":1,\"33\":2}}],[\"interfaces\",{\"1\":{\"28\":1}}],[\"introduction\",{\"0\":{\"28\":1,\"33\":1,\"42\":1},\"1\":{\"38\":1}}],[\"into\",{\"1\":{\"11\":1,\"12\":1,\"13\":3,\"33\":1,\"38\":1}}],[\"information\",{\"1\":{\"4\":1,\"43\":1}}],[\"in\",{\"0\":{\"43\":1},\"1\":{\"3\":2,\"4\":4,\"9\":4,\"11\":1,\"12\":1,\"13\":1,\"14\":3,\"17\":2,\"28\":1,\"29\":2,\"33\":3,\"34\":1,\"35\":3,\"38\":7,\"42\":1,\"43\":7,\"44\":1,\"45\":1}}],[\"imagetype\",{\"1\":{\"34\":1}}],[\"image\",{\"1\":{\"33\":1,\"34\":7,\"35\":1}}],[\"images\",{\"1\":{\"4\":1,\"34\":3,\"35\":1}}],[\"import\",{\"1\":{\"38\":2}}],[\"important\",{\"1\":{\"33\":3}}],[\"implemented\",{\"1\":{\"29\":1}}],[\"implementation\",{\"1\":{\"22\":1}}],[\"implementations\",{\"1\":{\"3\":2}}],[\"implements\",{\"1\":{\"13\":1,\"33\":1}}],[\"implement\",{\"1\":{\"9\":1,\"33\":2}}],[\"immediately\",{\"1\":{\"3\":1}}],[\"its\",{\"1\":{\"9\":1,\"11\":1,\"12\":1,\"33\":1,\"38\":1}}],[\"it\",{\"1\":{\"3\":4,\"4\":5,\"11\":1,\"14\":1,\"18\":3,\"19\":3,\"22\":2,\"28\":2,\"29\":1,\"33\":5,\"34\":1,\"35\":2,\"38\":3,\"42\":1,\"43\":2,\"45\":1}}],[\"配置\",{\"1\":{\"3\":1}}],[\"快速部署\",{\"1\":{\"3\":1}}],[\"let\",{\"1\":{\"28\":1,\"38\":1}}],[\"learn\",{\"1\":{\"22\":1,\"38\":2}}],[\"least\",{\"1\":{\"13\":1}}],[\"leakage\",{\"1\":{\"9\":1,\"14\":1}}],[\"line\",{\"1\":{\"45\":1}}],[\"link\",{\"1\":{\"3\":1}}],[\"listening\",{\"0\":{\"13\":1}}],[\"lifecycle\",{\"1\":{\"9\":1}}],[\"life\",{\"0\":{\"9\":1},\"2\":{\"16\":1}}],[\"like\",{\"1\":{\"4\":1,\"34\":1,\"44\":1,\"45\":1}}],[\"later\",{\"1\":{\"4\":1}}],[\"launch\",{\"1\":{\"3\":1}}],[\"lagrange\",{\"1\":{\"3\":7,\"4\":2}}],[\"long\",{\"1\":{\"45\":1}}],[\"loading\",{\"1\":{\"38\":1}}],[\"look\",{\"1\":{\"38\":1}}],[\"local\",{\"1\":{\"4\":1}}],[\"locally\",{\"1\":{\"3\":2}}],[\"logical\",{\"1\":{\"38\":1}}],[\"logic\",{\"1\":{\"9\":1,\"33\":1}}],[\"login\",{\"1\":{\"3\":1}}],[\"log\",{\"1\":{\"4\":1,\"43\":1}}],[\"logs\",{\"1\":{\"4\":2}}],[\"obtained\",{\"1\":{\"45\":1}}],[\"out\",{\"1\":{\"35\":1}}],[\"output\",{\"1\":{\"4\":3}}],[\"oh\",{\"1\":{\"19\":1}}],[\"otherwise\",{\"1\":{\"13\":1,\"14\":1}}],[\"own\",{\"1\":{\"9\":1,\"11\":1,\"12\":1,\"45\":1}}],[\"orrules\",{\"1\":{\"45\":1}}],[\"order\",{\"1\":{\"38\":4,\"43\":1,\"45\":1}}],[\"original\",{\"1\":{\"34\":1,\"38\":1}}],[\"or\",{\"1\":{\"4\":1,\"19\":3,\"34\":1,\"38\":1,\"43\":1,\"45\":2}}],[\"oftype\",{\"1\":{\"43\":2}}],[\"of\",{\"1\":{\"3\":3,\"4\":3,\"9\":2,\"13\":2,\"14\":1,\"19\":1,\"22\":3,\"28\":1,\"33\":7,\"34\":2,\"35\":1,\"38\":15,\"42\":1,\"43\":10,\"44\":1,\"45\":1}}],[\"on\",{\"1\":{\"33\":1}}],[\"one\",{\"1\":{\"13\":1,\"38\":2}}],[\"onebot\",{\"1\":{\"3\":9,\"4\":3}}],[\"onebotv11\",{\"0\":{\"3\":1},\"1\":{\"3\":2,\"4\":1,\"29\":2,\"34\":1,\"35\":3}}],[\"only\",{\"1\":{\"3\":1,\"22\":1,\"33\":2,\"38\":2,\"44\":1}}],[\"data\",{\"1\":{\"33\":2,\"34\":5,\"43\":1}}],[\"directly\",{\"1\":{\"33\":1,\"43\":1}}],[\"different\",{\"1\":{\"22\":1,\"33\":1}}],[\"diversity\",{\"1\":{\"22\":1}}],[\"default\",{\"1\":{\"43\":1}}],[\"defines\",{\"1\":{\"33\":1}}],[\"defined\",{\"1\":{\"28\":1,\"34\":1}}],[\"define\",{\"1\":{\"28\":1,\"38\":3}}],[\"definition\",{\"1\":{\"4\":1,\"9\":1,\"28\":1,\"33\":1}}],[\"detail\",{\"1\":{\"38\":1}}],[\"determined\",{\"1\":{\"43\":1}}],[\"determine\",{\"1\":{\"38\":1}}],[\"describes\",{\"1\":{\"33\":2}}],[\"description\",{\"1\":{\"29\":1,\"38\":2}}],[\"destruction\",{\"1\":{\"9\":1}}],[\"decide\",{\"1\":{\"22\":1}}],[\"development\",{\"1\":{\"22\":1}}],[\"developer\",{\"1\":{\"22\":1}}],[\"developed\",{\"1\":{\"3\":1}}],[\"dev\",{\"1\":{\"4\":1,\"38\":5}}],[\"demo\",{\"1\":{\"4\":1}}],[\"does\",{\"1\":{\"14\":1,\"28\":1,\"34\":1,\"35\":1}}],[\"do\",{\"1\":{\"9\":1,\"10\":1,\"38\":1,\"44\":1}}],[\"download\",{\"1\":{\"4\":1}}],[\"don\",{\"1\":{\"3\":1,\"33\":1,\"42\":1}}],[\"document\",{\"1\":{\"2\":1,\"9\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"documentation\",{\"0\":{\"0\":1},\"2\":{\"1\":1,\"8\":1,\"15\":1,\"20\":1,\"23\":1,\"26\":1,\"30\":1,\"36\":1,\"39\":1,\"46\":1}}],[\"facetype\",{\"1\":{\"34\":1,\"35\":1}}],[\"facilitate\",{\"1\":{\"10\":1}}],[\"false\",{\"1\":{\"29\":1,\"43\":8,\"44\":1,\"45\":1}}],[\"fullmatch\",{\"1\":{\"43\":2}}],[\"fully\",{\"1\":{\"3\":1}}],[\"functions\",{\"1\":{\"38\":1}}],[\"func\",{\"1\":{\"28\":1,\"29\":2,\"34\":5,\"35\":1,\"38\":5,\"43\":18,\"44\":1}}],[\"found\",{\"1\":{\"48\":1}}],[\"follows\",{\"1\":{\"28\":1,\"33\":1}}],[\"forcestart\",{\"1\":{\"43\":4}}],[\"forwards\",{\"1\":{\"28\":1}}],[\"forget\",{\"1\":{\"3\":1}}],[\"for\",{\"1\":{\"3\":2,\"4\":2,\"22\":2,\"28\":2,\"29\":2,\"33\":5,\"34\":2,\"38\":1,\"42\":1,\"43\":7,\"45\":1}}],[\"few\",{\"1\":{\"17\":1}}],[\"friend\",{\"1\":{\"45\":1}}],[\"from\",{\"1\":{\"11\":2,\"18\":1,\"19\":1,\"33\":1}}],[\"freely\",{\"1\":{\"4\":1}}],[\"findstringindex\",{\"1\":{\"43\":1}}],[\"find\",{\"1\":{\"28\":1,\"35\":1}}],[\"finalize\",{\"1\":{\"9\":2,\"14\":1}}],[\"fix\",{\"1\":{\"14\":1}}],[\"filter\",{\"1\":{\"43\":10,\"44\":1}}],[\"filtering\",{\"1\":{\"33\":1}}],[\"filling\",{\"1\":{\"3\":1}}],[\"filetype\",{\"1\":{\"34\":1}}],[\"file\",{\"1\":{\"3\":1,\"4\":1,\"34\":17,\"43\":1}}],[\"fields\",{\"1\":{\"34\":1,\"38\":2}}],[\"field\",{\"1\":{\"3\":3,\"38\":6,\"43\":3}}],[\"firstly\",{\"1\":{\"38\":1}}],[\"first\",{\"0\":{\"38\":1},\"1\":{\"2\":1,\"3\":2,\"4\":1,\"38\":1,\"42\":1,\"43\":1}}],[\"n\",{\"1\":{\"43\":1}}],[\"nil\",{\"1\":{\"43\":2}}],[\"nickname=\",{\"1\":{\"4\":1}}],[\"naturally\",{\"1\":{\"34\":1}}],[\"name\",{\"1\":{\"29\":1,\"33\":1,\"35\":2,\"38\":2,\"43\":1}}],[\"never\",{\"1\":{\"43\":5}}],[\"new\",{\"1\":{\"34\":1,\"42\":1,\"44\":1,\"45\":1}}],[\"newmessage\",{\"1\":{\"34\":3}}],[\"newrule\",{\"1\":{\"42\":2,\"44\":1,\"45\":3}}],[\"newrules\",{\"1\":{\"29\":1,\"38\":2}}],[\"newreply\",{\"1\":{\"29\":1,\"34\":4,\"35\":2,\"38\":3}}],[\"next\",{\"1\":{\"22\":1,\"38\":4}}],[\"needs\",{\"1\":{\"3\":1,\"9\":1,\"12\":1,\"13\":1,\"38\":2}}],[\"need\",{\"1\":{\"2\":1,\"3\":1,\"13\":1,\"22\":1,\"33\":2,\"34\":1,\"38\":2,\"42\":1,\"43\":1,\"45\":2}}],[\"now\",{\"1\":{\"34\":1,\"38\":1}}],[\"normalize\",{\"1\":{\"18\":1,\"19\":1}}],[\"notice\",{\"1\":{\"33\":1,\"43\":2,\"45\":1}}],[\"not\",{\"1\":{\"3\":1,\"4\":2,\"9\":1,\"14\":1,\"19\":1,\"22\":1,\"28\":1,\"34\":2,\"35\":1,\"44\":1,\"48\":1}}],[\"among\",{\"1\":{\"33\":1}}],[\"am\",{\"1\":{\"33\":1}}],[\"append\",{\"1\":{\"29\":1,\"38\":1}}],[\"appsettings\",{\"1\":{\"3\":1}}],[\"automatically\",{\"1\":{\"28\":1}}],[\"attachsegment\",{\"1\":{\"34\":5}}],[\"attachs\",{\"1\":{\"34\":5}}],[\"attempt\",{\"1\":{\"3\":1}}],[\"at\",{\"1\":{\"13\":1,\"14\":1,\"38\":1,\"43\":1,\"45\":1}}],[\"always\",{\"1\":{\"35\":1,\"42\":2,\"43\":7}}],[\"also\",{\"1\":{\"28\":1,\"43\":1}}],[\"allows\",{\"1\":{\"43\":1}}],[\"all\",{\"1\":{\"4\":1,\"14\":2,\"19\":1,\"33\":4}}],[\"already\",{\"1\":{\"3\":1,\"34\":1}}],[\"about\",{\"1\":{\"22\":1,\"33\":2,\"38\":1}}],[\"above\",{\"1\":{\"4\":1,\"34\":1,\"35\":1}}],[\"able\",{\"1\":{\"4\":1,\"35\":1}}],[\"act\",{\"1\":{\"28\":3}}],[\"actiontrial\",{\"1\":{\"29\":6}}],[\"actions\",{\"0\":{\"27\":1},\"1\":{\"29\":1,\"35\":1,\"38\":2},\"2\":{\"31\":1}}],[\"action\",{\"1\":{\"19\":2,\"28\":7,\"29\":1}}],[\"actioncall\",{\"1\":{\"13\":1,\"28\":2}}],[\"actionchannel\",{\"1\":{\"13\":1,\"19\":1,\"28\":1}}],[\"actually\",{\"1\":{\"28\":1}}],[\"actual\",{\"1\":{\"3\":1}}],[\"according\",{\"1\":{\"3\":1}}],[\"account\",{\"1\":{\"3\":2,\"4\":1}}],[\"accesstoken\",{\"1\":{\"3\":1}}],[\"are\",{\"1\":{\"3\":2,\"17\":2,\"33\":3,\"34\":1,\"45\":1}}],[\"addition\",{\"1\":{\"34\":1}}],[\"add\",{\"1\":{\"34\":3,\"42\":1,\"43\":1}}],[\"added\",{\"1\":{\"33\":1}}],[\"address\",{\"1\":{\"3\":2,\"4\":1}}],[\"adaptername\",{\"1\":{\"33\":1,\"43\":4}}],[\"adapters\",{\"1\":{\"14\":1,\"17\":1,\"28\":2}}],[\"adapter\",{\"0\":{\"7\":1,\"27\":1,\"29\":1},\"1\":{\"3\":3,\"9\":5,\"10\":1,\"11\":2,\"12\":2,\"13\":2,\"14\":1,\"18\":1,\"22\":4,\"28\":7,\"29\":4,\"33\":4,\"34\":1,\"35\":5,\"38\":11,\"43\":1},\"2\":{\"16\":1,\"21\":1,\"24\":1}}],[\"a\",{\"1\":{\"3\":1,\"4\":2,\"18\":1,\"19\":2,\"22\":2,\"28\":4,\"29\":5,\"33\":6,\"34\":9,\"35\":7,\"38\":12,\"42\":1,\"43\":2,\"44\":2,\"45\":2}}],[\"after\",{\"1\":{\"3\":3,\"4\":1,\"10\":1,\"12\":1,\"33\":1,\"38\":2}}],[\"any\",{\"1\":{\"9\":1,\"28\":5,\"34\":3,\"35\":1,\"43\":6}}],[\"andrules\",{\"1\":{\"45\":2}}],[\"and\",{\"1\":{\"3\":5,\"4\":4,\"9\":5,\"11\":2,\"12\":1,\"13\":2,\"18\":2,\"19\":1,\"22\":1,\"28\":3,\"29\":1,\"33\":6,\"34\":4,\"35\":2,\"38\":11,\"42\":1,\"43\":3,\"44\":2,\"45\":9}}],[\"an\",{\"1\":{\"3\":1,\"22\":1,\"34\":2,\"38\":2,\"43\":1}}],[\"assumed\",{\"1\":{\"3\":1}}],[\"assume\",{\"1\":{\"3\":1}}],[\"as\",{\"1\":{\"3\":3,\"4\":4,\"13\":1,\"28\":2,\"33\":2,\"34\":1,\"38\":1,\"43\":1}}],[\"creating\",{\"1\":{\"44\":1}}],[\"creates\",{\"1\":{\"44\":1,\"45\":1}}],[\"create\",{\"1\":{\"33\":1,\"34\":4,\"38\":1,\"42\":1,\"43\":1}}],[\"created\",{\"1\":{\"28\":1}}],[\"checks\",{\"1\":{\"44\":1}}],[\"check\",{\"1\":{\"28\":1}}],[\"chan\",{\"1\":{\"28\":2}}],[\"channel\",{\"1\":{\"28\":1}}],[\"change\",{\"1\":{\"3\":2}}],[\"chapter\",{\"1\":{\"17\":1}}],[\"chapters\",{\"1\":{\"4\":1}}],[\"chatbots\",{\"1\":{\"33\":1}}],[\"chat\",{\"1\":{\"4\":1,\"11\":1,\"12\":1,\"13\":1}}],[\"ctrl+c\",{\"1\":{\"14\":1}}],[\"customize\",{\"1\":{\"44\":1}}],[\"custom\",{\"0\":{\"44\":1},\"1\":{\"13\":1}}],[\"current\",{\"1\":{\"4\":1,\"28\":1,\"38\":2}}],[\"currently\",{\"1\":{\"3\":1}}],[\"calculation\",{\"1\":{\"45\":1}}],[\"calculated\",{\"1\":{\"45\":1}}],[\"callaction\",{\"1\":{\"28\":3,\"29\":3,\"35\":1}}],[\"call\",{\"0\":{\"29\":1},\"1\":{\"13\":1,\"18\":1,\"28\":3,\"29\":2,\"38\":1}}],[\"calls\",{\"1\":{\"13\":3}}],[\"called\",{\"1\":{\"9\":1,\"14\":1}}],[\"camelcase\",{\"1\":{\"38\":1}}],[\"care\",{\"1\":{\"33\":1}}],[\"case\",{\"1\":{\"29\":1}}],[\"cause\",{\"1\":{\"14\":1}}],[\"cannot\",{\"1\":{\"14\":1,\"28\":1,\"33\":1}}],[\"can\",{\"1\":{\"3\":1,\"4\":4,\"14\":1,\"22\":1,\"28\":2,\"29\":2,\"34\":5,\"35\":1,\"38\":8,\"42\":3,\"43\":2,\"44\":1,\"45\":4}}],[\"cycle\",{\"0\":{\"9\":1},\"2\":{\"16\":1}}],[\"clearer\",{\"1\":{\"43\":1}}],[\"clearly\",{\"1\":{\"4\":1}}],[\"close\",{\"1\":{\"14\":1}}],[\"closed\",{\"1\":{\"9\":1,\"14\":1}}],[\"clone\",{\"1\":{\"4\":1}}],[\"cd\",{\"1\":{\"4\":1}}],[\"code\",{\"1\":{\"35\":1}}],[\"course\",{\"1\":{\"34\":1}}],[\"correct\",{\"1\":{\"28\":1}}],[\"corresponding\",{\"1\":{\"28\":1,\"29\":1,\"34\":1}}],[\"compilation\",{\"1\":{\"43\":1}}],[\"compile\",{\"1\":{\"43\":2}}],[\"complex\",{\"1\":{\"42\":1}}],[\"completed\",{\"1\":{\"38\":1}}],[\"completely\",{\"1\":{\"22\":1,\"34\":1,\"38\":1}}],[\"composed\",{\"1\":{\"38\":1}}],[\"computer\",{\"1\":{\"38\":1}}],[\"comes\",{\"1\":{\"33\":1}}],[\"commonly\",{\"1\":{\"17\":1}}],[\"common\",{\"0\":{\"17\":1},\"1\":{\"34\":1}}],[\"commands\",{\"1\":{\"43\":1}}],[\"commandline\",{\"1\":{\"4\":1}}],[\"command\",{\"1\":{\"4\":4,\"38\":2,\"43\":6}}],[\"com\",{\"1\":{\"4\":1,\"38\":5}}],[\"concatenate\",{\"1\":{\"34\":1}}],[\"constructed\",{\"1\":{\"35\":1}}],[\"construction\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"consistent\",{\"1\":{\"4\":1}}],[\"contain\",{\"1\":{\"45\":2}}],[\"contains\",{\"1\":{\"34\":1,\"43\":3}}],[\"containing\",{\"1\":{\"29\":1,\"38\":1}}],[\"content\",{\"1\":{\"33\":1,\"38\":4}}],[\"continue\",{\"1\":{\"22\":1}}],[\"controllable\",{\"1\":{\"22\":1}}],[\"converted\",{\"1\":{\"33\":1}}],[\"convert\",{\"1\":{\"11\":1,\"33\":1}}],[\"congratulations\",{\"1\":{\"4\":1,\"38\":1}}],[\"connection\",{\"1\":{\"45\":1}}],[\"connecting\",{\"0\":{\"45\":1}}],[\"connected\",{\"1\":{\"4\":1,\"45\":2}}],[\"connect\",{\"1\":{\"3\":1,\"34\":1,\"45\":2}}],[\"configured\",{\"1\":{\"3\":1,\"4\":1}}],[\"configures\",{\"1\":{\"3\":1,\"4\":1}}],[\"configurations\",{\"1\":{\"43\":1}}],[\"configuration\",{\"1\":{\"3\":2,\"4\":3},\"2\":{\"6\":1}}],[\"configuring\",{\"0\":{\"3\":1}}],[\"screening\",{\"1\":{\"38\":1}}],[\"speaks\",{\"1\":{\"38\":1}}],[\"specify\",{\"1\":{\"38\":1,\"42\":1}}],[\"specified\",{\"1\":{\"11\":1,\"13\":1,\"34\":1,\"43\":8}}],[\"specification\",{\"1\":{\"22\":1}}],[\"specific\",{\"1\":{\"3\":1,\"22\":1,\"28\":1,\"33\":1,\"38\":2}}],[\"special\",{\"1\":{\"33\":1}}],[\"split\",{\"1\":{\"33\":1}}],[\"say\",{\"1\":{\"28\":1}}],[\"same\",{\"1\":{\"4\":1,\"34\":1,\"38\":1,\"45\":1}}],[\"similar\",{\"1\":{\"34\":1}}],[\"simple\",{\"1\":{\"4\":1,\"9\":1,\"33\":1,\"34\":1,\"42\":1}}],[\"situation\",{\"1\":{\"28\":1}}],[\"shoot\",{\"1\":{\"19\":1}}],[\"should\",{\"1\":{\"9\":2,\"11\":1,\"14\":1,\"28\":1,\"35\":1,\"38\":1}}],[\"solve\",{\"1\":{\"22\":1}}],[\"so\",{\"1\":{\"17\":1,\"22\":1,\"28\":1,\"33\":2,\"35\":1}}],[\"some\",{\"1\":{\"10\":1,\"13\":2,\"17\":1,\"34\":2}}],[\"str\",{\"1\":{\"43\":2}}],[\"strs\",{\"1\":{\"43\":2}}],[\"strings\",{\"1\":{\"43\":7,\"44\":1}}],[\"string\",{\"1\":{\"33\":9,\"34\":5,\"43\":8}}],[\"strict\",{\"1\":{\"22\":1}}],[\"struct\",{\"1\":{\"28\":2,\"33\":2}}],[\"still\",{\"1\":{\"22\":1,\"42\":1}}],[\"stuck\",{\"1\":{\"13\":1,\"28\":1}}],[\"standard\",{\"1\":{\"22\":1}}],[\"state\",{\"1\":{\"4\":1}}],[\"status\",{\"1\":{\"4\":5}}],[\"starts\",{\"1\":{\"43\":3}}],[\"started\",{\"1\":{\"9\":1,\"10\":1}}],[\"start=\",{\"1\":{\"4\":1}}],[\"start\",{\"0\":{\"2\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1},\"1\":{\"3\":1,\"9\":6,\"10\":1,\"43\":4},\"2\":{\"5\":1}}],[\"s\",{\"1\":{\"11\":1,\"12\":2,\"13\":2,\"19\":1,\"38\":1,\"43\":1}}],[\"set\",{\"1\":{\"43\":1}}],[\"sent\",{\"1\":{\"38\":1}}],[\"sendmessage\",{\"1\":{\"35\":4,\"38\":3}}],[\"sender\",{\"1\":{\"33\":1}}],[\"sendprivatemessage\",{\"1\":{\"29\":1}}],[\"sends\",{\"1\":{\"29\":1}}],[\"sendchannel\",{\"1\":{\"12\":1,\"18\":2,\"19\":1}}],[\"send\",{\"1\":{\"4\":2,\"12\":2,\"29\":1,\"35\":2}}],[\"sending\",{\"0\":{\"12\":1,\"35\":1},\"1\":{\"4\":1,\"33\":1}}],[\"self\",{\"1\":{\"33\":1,\"45\":1}}],[\"segment\",{\"1\":{\"33\":1,\"34\":5,\"43\":3}}],[\"segments\",{\"1\":{\"33\":5}}],[\"section\",{\"1\":{\"22\":1}}],[\"seconds\",{\"1\":{\"3\":1,\"4\":1}}],[\"several\",{\"1\":{\"4\":1,\"33\":1,\"38\":1,\"43\":1}}],[\"see\",{\"1\":{\"4\":3}}],[\"server\",{\"1\":{\"3\":1,\"4\":2}}],[\"services\",{\"0\":{\"3\":1}}],[\"sure\",{\"1\":{\"33\":1,\"34\":1}}],[\"summarized\",{\"1\":{\"17\":1}}],[\"subsequent\",{\"1\":{\"14\":1}}],[\"such\",{\"1\":{\"13\":1,\"28\":1,\"33\":1,\"43\":1}}],[\"successful\",{\"1\":{\"4\":1}}],[\"successfully\",{\"1\":{\"4\":1}}],[\"suffix\",{\"1\":{\"3\":1}}],[\"supports\",{\"1\":{\"3\":1}}],[\"404\",{\"1\":{\"48\":1}}],[\"4\",{\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"111\",{\"1\":{\"45\":2}}],[\"114514\",{\"1\":{\"29\":1}}],[\"123\",{\"1\":{\"34\":1,\"35\":1}}],[\"1\",{\"0\":{\"11\":1},\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"28\":1,\"29\":1,\"32\":1,\"38\":5,\"41\":1}}],[\"value\",{\"1\":{\"38\":1}}],[\"various\",{\"1\":{\"42\":1}}],[\"var\",{\"1\":{\"29\":1,\"35\":1,\"38\":2}}],[\"vuejs\",{\"1\":{\"34\":2,\"35\":1}}],[\"videotype\",{\"1\":{\"34\":1}}],[\"video\",{\"1\":{\"34\":5}}],[\"voicetype\",{\"1\":{\"34\":1}}],[\"voice\",{\"1\":{\"34\":5}}],[\"v0\",{\"1\":{\"29\":1,\"38\":2}}],[\"very\",{\"1\":{\"9\":1,\"22\":2,\"28\":1,\"33\":1,\"42\":2}}],[\"versions\",{\"1\":{\"14\":1}}],[\"version\",{\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"29\":1,\"32\":1,\"38\":3,\"41\":1}}],[\"v11\",{\"1\":{\"3\":2,\"4\":1}}],[\"v1\",{\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"wrote\",{\"1\":{\"35\":1}}],[\"writing\",{\"1\":{\"2\":1,\"9\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"33\":1,\"38\":3,\"41\":1,\"42\":1}}],[\"world\",{\"1\":{\"34\":3,\"35\":1}}],[\"work\",{\"1\":{\"10\":2}}],[\"why\",{\"1\":{\"35\":1}}],[\"who\",{\"1\":{\"33\":3}}],[\"whole\",{\"1\":{\"33\":1}}],[\"what\",{\"1\":{\"28\":1,\"38\":1}}],[\"where\",{\"1\":{\"33\":1}}],[\"whether\",{\"1\":{\"28\":1,\"38\":1}}],[\"when\",{\"1\":{\"2\":1,\"9\":2,\"14\":2,\"17\":1,\"22\":1,\"27\":1,\"29\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"38\":1,\"41\":1,\"43\":6,\"44\":1}}],[\"which\",{\"1\":{\"28\":3,\"33\":5,\"38\":1,\"45\":2}}],[\"ws\",{\"1\":{\"3\":3,\"4\":2}}],[\"with\",{\"1\":{\"3\":1,\"4\":4,\"28\":1,\"33\":1,\"43\":3}}],[\"will\",{\"1\":{\"3\":2,\"4\":6,\"9\":2,\"11\":1,\"12\":1,\"13\":2,\"14\":4,\"18\":1,\"19\":2,\"28\":2,\"34\":1,\"35\":1,\"38\":1,\"43\":2,\"45\":2}}],[\"websocket\",{\"1\":{\"3\":2,\"4\":1}}],[\"we\",{\"1\":{\"3\":2,\"4\":1,\"28\":1,\"33\":1,\"38\":3}}],[\"want\",{\"1\":{\"28\":1,\"34\":1,\"35\":1}}],[\"warn\",{\"1\":{\"13\":1}}],[\"warning\",{\"1\":{\"2\":1,\"3\":1,\"4\":1,\"9\":1,\"13\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"33\":1,\"38\":1,\"41\":1}}],[\"way\",{\"1\":{\"11\":1,\"12\":1,\"42\":1}}],[\"waiting\",{\"1\":{\"4\":1}}],[\"was\",{\"1\":{\"2\":1,\"9\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"targeting\",{\"1\":{\"43\":1}}],[\"take\",{\"1\":{\"11\":1,\"38\":2}}],[\"triggers\",{\"1\":{\"44\":1}}],[\"trial\",{\"1\":{\"29\":1}}],[\"try\",{\"1\":{\"14\":1,\"22\":1,\"28\":1}}],[\"true\",{\"1\":{\"11\":1,\"18\":1,\"29\":1,\"35\":1,\"38\":2,\"43\":20,\"44\":1}}],[\"turn\",{\"1\":{\"14\":1}}],[\"two\",{\"1\":{\"9\":1,\"34\":2,\"38\":1}}],[\"texttype\",{\"1\":{\"34\":1}}],[\"text\",{\"1\":{\"29\":2,\"33\":4,\"34\":10,\"35\":1}}],[\"terms\",{\"1\":{\"9\":1}}],[\"testing\",{\"1\":{\"4\":1,\"29\":1}}],[\"test\",{\"1\":{\"4\":1,\"29\":2}}],[\"typelist\",{\"1\":{\"43\":2}}],[\"typename\",{\"1\":{\"33\":1,\"43\":4}}],[\"types\",{\"0\":{\"32\":1},\"1\":{\"28\":1,\"33\":3,\"34\":1,\"38\":2,\"43\":1}}],[\"type\",{\"1\":{\"3\":1,\"11\":1,\"28\":1,\"33\":12,\"34\":7,\"35\":1,\"38\":3,\"43\":3,\"44\":1}}],[\"t\",{\"1\":{\"3\":1,\"33\":1,\"42\":1}}],[\"times\",{\"1\":{\"35\":1}}],[\"time\",{\"1\":{\"3\":1,\"4\":1}}],[\"tips\",{\"1\":{\"2\":1,\"3\":2,\"4\":2,\"14\":1,\"28\":1,\"34\":1,\"35\":1,\"38\":2,\"43\":2,\"45\":1}}],[\"than\",{\"1\":{\"38\":1}}],[\"that\",{\"1\":{\"3\":2,\"4\":2,\"9\":1,\"13\":1,\"19\":1,\"22\":1,\"29\":1,\"34\":3,\"35\":1,\"38\":4,\"43\":4,\"44\":1}}],[\"three\",{\"1\":{\"35\":1}}],[\"thread\",{\"1\":{\"14\":1}}],[\"through\",{\"1\":{\"33\":1,\"35\":1}}],[\"there\",{\"1\":{\"43\":1}}],[\"therefore\",{\"1\":{\"34\":1}}],[\"them\",{\"1\":{\"33\":2,\"34\":1,\"38\":1,\"43\":1}}],[\"these\",{\"1\":{\"9\":1,\"12\":1,\"13\":2,\"34\":1}}],[\"they\",{\"1\":{\"4\":1,\"17\":1,\"19\":2,\"28\":2}}],[\"then\",{\"1\":{\"4\":1,\"18\":1,\"19\":1}}],[\"the\",{\"1\":{\"2\":1,\"3\":14,\"4\":17,\"9\":12,\"10\":2,\"11\":8,\"12\":5,\"13\":11,\"14\":5,\"17\":1,\"18\":2,\"19\":1,\"22\":11,\"27\":1,\"28\":8,\"29\":8,\"32\":1,\"33\":12,\"34\":9,\"35\":6,\"38\":48,\"41\":1,\"42\":5,\"43\":31,\"44\":4,\"45\":6}}],[\"this\",{\"1\":{\"2\":1,\"3\":1,\"4\":1,\"9\":2,\"11\":1,\"14\":3,\"17\":2,\"22\":1,\"27\":1,\"28\":2,\"32\":1,\"33\":9,\"34\":1,\"38\":1,\"41\":1,\"43\":1,\"44\":2,\"45\":1}}],[\"together\",{\"1\":{\"33\":1,\"34\":2}}],[\"torawtext\",{\"1\":{\"33\":1}}],[\"tome\",{\"1\":{\"29\":1,\"38\":2,\"43\":2}}],[\"to\",{\"1\":{\"2\":1,\"3\":7,\"4\":5,\"9\":2,\"10\":3,\"11\":3,\"12\":2,\"13\":2,\"14\":4,\"18\":2,\"22\":6,\"28\":6,\"29\":3,\"33\":8,\"34\":16,\"35\":3,\"38\":13,\"42\":4,\"43\":9,\"45\":8}}],[\"yourself\",{\"1\":{\"22\":1}}],[\"your\",{\"0\":{\"38\":1},\"1\":{\"3\":2,\"4\":1,\"38\":1,\"44\":1,\"45\":2}}],[\"you\",{\"1\":{\"2\":1,\"3\":4,\"4\":7,\"13\":2,\"14\":1,\"22\":2,\"28\":4,\"29\":2,\"33\":3,\"34\":9,\"35\":4,\"38\":7,\"42\":4,\"43\":4,\"44\":1,\"45\":4}}]],\"version\":2},\"/zh/\":{\"documentCount\":48,\"nextId\":48,\"documentIds\":{\"0\":\"13\",\"1\":\"13@0\",\"2\":\"14\",\"3\":\"14#配置-onebotv11-协议服务\",\"4\":\"14#安装-gonebot\",\"5\":\"14@0\",\"6\":\"14@1\",\"7\":\"15\",\"8\":\"15@0\",\"9\":\"16\",\"10\":\"16#开始\",\"11\":\"16#_1-启动消息收取\",\"12\":\"16#_2-启动消息发送\",\"13\":\"16#_3-启动行为监听\",\"14\":\"16#结束\",\"15\":\"16@0\",\"16\":\"16@1\",\"17\":\"17\",\"18\":\"17#adapter-receivechannel-push-msg-true\",\"19\":\"17#adapter-sendchannel-pull-adapter-actionchannel-pull\",\"20\":\"17@0\",\"21\":\"17@1\",\"22\":\"18\",\"23\":\"18@0\",\"24\":\"18@1\",\"25\":\"19\",\"26\":\"19@0\",\"27\":\"20\",\"28\":\"20#简介\",\"29\":\"20#适配器行为调用\",\"30\":\"20@0\",\"31\":\"20@1\",\"32\":\"21\",\"33\":\"21#简介\",\"34\":\"21#消息构造\",\"35\":\"21#消息发送\",\"36\":\"21@0\",\"37\":\"21@1\",\"38\":\"22\",\"39\":\"22@0\",\"40\":\"22@1\",\"41\":\"23\",\"42\":\"23#简介\",\"43\":\"23#内置规则\",\"44\":\"23#自定义规则\",\"45\":\"23#连接规则\",\"46\":\"23@0\",\"47\":\"23@1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1,10],\"3\":[3,60],\"4\":[2,77],\"5\":[null,null,1],\"6\":[null,null,3],\"7\":[1],\"8\":[null,null,1],\"9\":[1,31],\"10\":[1,8],\"11\":[2,15],\"12\":[2,5],\"13\":[2,20],\"14\":[1,23],\"15\":[null,null,1],\"16\":[null,null,2],\"17\":[1,11],\"18\":[1,12],\"19\":[1,10],\"20\":[null,null,1],\"21\":[null,null,2],\"22\":[1,18],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1],\"26\":[null,null,1],\"27\":[1,7],\"28\":[1,69],\"29\":[1,60],\"30\":[null,null,1],\"31\":[null,null,2],\"32\":[1,7],\"33\":[1,105],\"34\":[1,86],\"35\":[1,55],\"36\":[null,null,1],\"37\":[null,null,2],\"38\":[1,121],\"39\":[null,null,1],\"40\":[null,null,1],\"41\":[1,7],\"42\":[1,12],\"43\":[1,119],\"44\":[1,29],\"45\":[1,36],\"46\":[null,null,1],\"47\":[null,null,2]},\"averageFieldLength\":[1.2797194475826146,32.226851733726846,1.1062400170857236],\"storedFields\":{\"0\":{\"h\":\"文档\"},\"1\":{\"c\":[\"文档\"]},\"2\":{\"h\":\"快速开始\",\"t\":[\"提示\",\"你可能需要先安装 Golang\",\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\"]},\"3\":{\"h\":\"配置 OneBotV11 协议服务\",\"t\":[\"由于适配器尚未开发完全，目前 GoneBot 仅支持 OneBotV11 协议适配器。\",\"以 Lagrange.OneBot 作为协议服务端为例：\",\"提示\",\"你可能需要前往下方链接先行安装 Lagrange.OneBot。\",\"Lagrange.OneBot 快速部署 & 配置\",\"我们会假设你已经在本地安装了 Lagrange.OneBot。\",\"安装好 Lagrange.OneBot 后，第一次启动 Lagrange.OneBot 并在它生成配置文件后立即退出，修改生成的 appsettings.json 其中的 Implementations 内容：\",\"提示\",\"别忘了填写 Account 字段中的 Uin 字段，填入机器人的 QQ 号用来登录！\",\"{ ..., \\\"Implementations\\\": [ { \\\"Type\\\": \\\"ReverseWebSocket\\\", \\\"Host\\\": \\\"0.0.0.0\\\", \\\"Port\\\": 25565, \\\"Suffix\\\": \\\"/onebot/v11/ws\\\", \\\"ReconnectInterval\\\": 5000, \\\"HeartBeatInterval\\\": 5000, \\\"AccessToken\\\": \\\"\\\" } ] } \",\"注意\",\"这配置了一项反向 WebSocket 服务，并每五秒尝试连接 ws://0.0.0.0:25565/onebot/v11/ws。\",\"这里的地址和端口假定了你在本地运行 GoneBot，并将 OneBotV11 适配器的 WebSocket 端口配置为 25565，你可以根据你的实际需求修改具体的地址和端口。\",\"完成配置后，启动 Lagrange.OneBot。\"]},\"4\":{\"h\":\"安装 GoneBot\",\"t\":[\"我们准备了 GoneBot 的一个 Demo，你可以直接下载并运行它：\",\"git clone https://github.com/gonebot-dev/gonedemo.git cd gonedemo go run gonedemo \",\"gonedemo 使用了如下的配置文件：\",\"ONEBOTV11_HOST=\\\"0.0.0.0:25565\\\" COMMAND_START=\\\"/\\\" NICKNAME=\\\"bot\\\" \",\"可以看到，gonedemo 默认配置了 WebSocket 地址为 ws://0.0.0.0:25565/onebot/v11/ws，与之前的 Lagrange.OneBot 配置一致。\",\"等待几秒后，你会看到 gonedemo 成功连接到 Lagrange.OneBot 并输出相关日志：\",\"命令行输出\",\"如果你看到了类似上面的日志输出，那么恭喜你，你的第一个 QQ 机器人配置成功了！\",\"提示\",\"gonedemo 使用 / 作为指令前缀，你可以自由修改它，但相关的 Command 规则会以该配置作为前缀识别。\",\"关于 Command 规则的定义会在之后的章节中给出。\",\"gonedemo 默认配置了 Echo 和 Status 两个插件。\",\"提示\",\"你可以通过向 Bot 账号私发 /echo 和 /status 来测试它们。\",\"它们分别会原封不动地回复相同的消息，和输出当前服务器的状态信息：\",\"Echo 插件\",\"Status 插件\",\"注意\",\"在本地测试时，有时 Lagrange.OneBot 可能会一直无法发出链接到 QQ 服务器的图片（它会在日志中明确写出问题），这可能并不是 GoneBot 出现的问题。\"]},\"5\":{\"c\":[\"快速开始\"]},\"6\":{\"c\":[\"安装\",\"配置\",\"运行\"]},\"7\":{\"h\":\"适配器\"},\"8\":{\"c\":[\"文档\"]},\"9\":{\"h\":\"生命周期\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\",\"在 GoneBot 中，适配器的生命周期非常简单，开始，和结束。也就是适配器的启动和销毁。\",\"在定义上，适配器需要实现 Start 方法和 Finalize 方法，这两个方法均不需要任何参数，其中 Start 方法会通过 goroutine 启动，适配器应当在 Start 方法中启动自己的业务逻辑，Finalize 方法会在 GoneBot 关闭时调用，适配器应当在此方法中释放资源，防止泄漏。\"]},\"10\":{\"h\":\"开始\",\"t\":[\"在 Start 方法启动之后，适配器有一些不得不做的工作，以方便 GoneBot 能够正常工作：\"]},\"11\":{\"h\":\"1. 启动消息收取\",\"t\":[\" 适配器应当以自己的方式收取来自聊天平台的消息，并将消息转换为 GoneBot 规定的 Message 类型，并使用 ReceiveChannel.Push(msg, true) 将消息塞入适配器的收取消息队列，GoneBot 会从此队列中取出消息，并将消息传递给插件。\"]},\"12\":{\"h\":\"2. 启动消息发送\",\"t\":[\" 在经过插件的处理之后，插件的回复会被塞入适配器的发送消息队列 SendChannel，适配器需要将这些回复以自己的方式发送到聊天平台。\"]},\"13\":{\"h\":\"3. 启动行为监听\",\"t\":[\" 如果聊天平台实现了一些自定义行为（如 QQ 的戳一戳等），插件可能会产生一些行为调用，GoneBot 会将这些调用塞入适配器的 ActionChannel，适配器需要处理这些行为，并将处理结果塞入传入的 ActionCall 所指定的 ResultChannel。\",\"注意\",\"无论调用结果如何，你都需要塞至少一个结果进入 ResultChannel，否则调用该行为的插件会原地卡死！\",\"我警告你！🫵🫵🫵\"]},\"14\":{\"h\":\"结束\",\"t\":[\"在 GoneBot 关闭时，会依次调用所有适配器的 Finalize 方法，适配器应当在此方法中释放所有资源，防止泄漏。\",\"注意\",\"但这并不意味着你可以随意阻塞线程！否则会导致 GoneBot 不能正常关闭！\",\"提示\",\"直到 v1.1.4 版本，GoneBot 还无法在用户使用 Ctrl+C 时正常退出，在之后的版本中，GoneBot 将会尝试修复这个问题\"]},\"15\":{\"c\":[\"文档\"]},\"16\":{\"c\":[\"适配器\",\"生命周期\"]},\"17\":{\"h\":\"常用方法\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\",\"本章节中，整理了一些适配器中常用的方法。\",\"整理了一下，发现真的好少\"]},\"18\":{\"h\":\"\",\"t\":[\"将收到的已经规范化的消息推送到接收通道中，供 GoneBot 使用，第二个参数是 isReceive，因为 SendChannel 也在使用这个方法，只需要填写 true 即可\"]},\"19\":{\"h\":\",\",\"t\":[\"分别从 SendChannel 和 ActionChannel 中取出一个消息或动作，用来处理，在没有消息或动作时会阻塞线程，直到有消息或动作再返回。\",\"卧槽，没了\"]},\"20\":{\"c\":[\"文档\"]},\"21\":{\"c\":[\"适配器\",\"方法\"]},\"22\":{\"h\":\"前言\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\",\"由于适配器对接不同的平台，其行为可能会大不相同，因此，GoneBot 无法对适配器给出一个完全严格可控的标准，只能给出一个大致的规范，具体实现还是由开发者自行决定。如果你遇到了一款非常不稳定但不得不用的适配器，你可能需要尝试自行解决。\",\"请继续前往下一个板块，了解适配器的部分开发要求吧。\"]},\"23\":{\"c\":[\"文档\"]},\"24\":{\"c\":[\"适配器\"]},\"25\":{\"h\":\"插件\"},\"26\":{\"c\":[\"文档\"]},\"27\":{\"h\":\"适配器行为\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\"]},\"28\":{\"h\":\"简介\",\"t\":[\"对于适配器，它们可能会定义专属于某个平台的行为（如 QQ 戳一戳、合并转发等），这些行为不能用消息类型表示，但它们存在而且可能非常有用，因此，GoneBot 也创建了对应的接口，响应器可以通过这些接口，尝试让适配器执行它定义的行为。\",\"适配器行为的接口定义如下：\",\"// If you want to call adapter action, you should use this struct type ActionCall struct { // Which action Action any // Which channel to push the result, will initialize automatically ResultChannel *chan any } \",\"对于适配器，我们提供了 CallAction 方法，用于调用适配器行为：\",\"func (a *Adapter) CallAction(action any) (result any) { act := message.ActionCall{Action: action} resultChannel := make(chan any, 1) act.ResultChannel = &resultChannel a.ActionChannel.Push(&act) return <-resultChannel } \",\"提示\",\"如果适配器没有返回结果到 resultChannel，CallAction 会卡死并阻塞当前响应器，如果你发现这种情况，请检查你调用的 Action 是否正确。\",\"而如果发现实际上是适配器的问题，Man! What can I say.\"]},\"29\":{\"h\":\"适配器行为调用\",\"t\":[\"在适配器已经实现了对应行为的情况下，你可以使用 CallAction 方法调用它。\",\"例如，在 OneBotV11 适配器中，你可以在用户向机器人发送含 test 的文本时调用 CallAction 方法来发送私发消息：\",\"// ... var ActionTrial plugin.GonePlugin func init() { ActionTrial.Name = \\\"Action Trial\\\" ActionTrial.Version = \\\"v0.0.1\\\" ActionTrial.Description = \\\"A plugin for testing actions\\\" ActionTrial.Handlers = append(ActionTrial.Handlers, plugin.GoneHandler{ Rules: rule.NewRules(rule.ToMe()).And(rule.Keyword(false, \\\"test\\\")), Handler: func(a *adapter.Adapter, msg message.Message) bool { a.CallAction(onebotv11.SendPrivateMessage{ UserID: 114514, Message: message.NewReply(msg).Text(\\\"Hello!\\\").GetSegments(), }) return true }, }) } \"]},\"30\":{\"c\":[\"文档\"]},\"31\":{\"c\":[\"插件\",\"适配器行为\"]},\"32\":{\"h\":\"消息类型\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\"]},\"33\":{\"h\":\"简介\",\"t\":[\"消息是聊天机器人最为重要的部分，所有的逻辑都围绕消息处理展开，因此，了解消息类型对于编写插件非常重要。\",\"在 GoneBot 中，我们将一段 消息 拆分为若干个 消息段，每个消息段代表一段特殊类型的消息，例如 文本text，图片image 等。\",\"对于消息类型，GoneBot 的定义如下：\",\"// This describes a simple part of a message type MessageSegment struct { // Message type Type string `json:\\\"type\\\"` // Make sure it implements MessageType interface Data MessageType `json:\\\"data\\\"` } // Implement this to create a message type type MessageType interface { // Which adapter is this message for AdapterName() string // Which message type is this message for TypeName() string // Convert this message segment to raw text ToRawText(msg MessageSegment) string } // This describes the whole message type Message struct { // Is the message to me? IsToMe bool // Which group is it in?(Only useful with group message and notice) Group string // Who is sending this message? Sender string // Who is receiving this message? Receiver string // Who am i? Self string // All the message segments segments []MessageSegment // All the text segments are added together rawText string } \",\"其中，segments 和 rawText 无法直接被你修改，你需要通过 GetSegments() 和 GetRawText() 来读取它们。\",\"MessageType 定义了消息类型的方法，对于一个消息类型，重要的是它所属的适配器（每个适配器可能会实现不同的消息类型），它的类型名称，以及它如何被转换为纯文本（用于消息筛选等）。\",\"注意\",\"在这之后的内容，收到的消息都由适配器给出，因此，你无需关心消息从何而来，而只需关心消息的具体内容。\"]},\"34\":{\"h\":\"消息构造\",\"t\":[\"消息的构造方式和 Rules 类似，你可以使用 message.NewReply() 快速创建对一条消息的空回复，也可以使用 message.NewMessage() 创建一条新的消息。\",\"提示\",\"使用 message.NewMessage() 时，你可能会漏掉一些需要指定的字段。\",\"因此，在完全有把握之前，不推荐使用 message.NewMessage()\",\"GoneBot 内置了一些简单、通用的消息类型：\",\"// Text attachs a plain text message segment to message func (m *Message) Text(text string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"text\\\", Data: TextType{ Text: \\\"Hello, world!\\\", }, }) return m } // Image attachs an image message segment to message func (m *Message) Image(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"image\\\", Data: ImageType{ File: file, }, }) return m } // Voice attachs a voice message segment to message func (m *Message) Voice(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"voice\\\", Data: VoiceType{ File: file, }, }) return m } // Video attachs a video message segment to message func (m *Message) Video(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"video\\\", Data: VideoType{ File: file, }, }) return m } // File attachs a file message segment to message func (m *Message) File(file string) *Message { m.AttachSegment(MessageSegment{ Type: \\\"file\\\", Data: FileType{ File: file, }, }) return m } \",\"你可以直接在 message 中添加并连接它们：\",\"reply := message.NewReply(msg). Text(\\\"Hello, world!\\\"). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") \",\"像上面这样，你就能快速创建一个同时包含文本和图片的回复。\",\"当然，对于适配器定义的消息类型，GoneBot 自然不会有对应的添加方法，但你可以通过 Any() 来添加任意的消息类型：\",\"例如，像这样为刚刚的消息添加一个 qq 表情：\",\"reply := message.NewReply(msg). Text(\\\"Hello, world!\\\"). Any(onebotv11.FaceType{ ID: 123 }). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") \",\"如果你已经得到了两个现成的消息体，想把它们连在一起，你可以使用 Join() 来连接两条消息：\",\"reply := message.NewReply(msg).Join(msg) \",\"这样就能创建一条与原消息完全一样的回复。\"]},\"35\":{\"h\":\"消息发送\",\"t\":[\"当你构造好一条消息，你总是希望将消息发出去。在 Handler 中，GoneBot 会传入适配器指针，你可以通过它来判断适配器类型和发送消息：\",\"Handler: func (a *adapter.Adapter, msg message.Message) bool { var reply *message.Message if a.Name == onebotv11.OneBotV11.Name { reply = message.NewReply(msg). Text(\\\"Hello, world!\\\"). Any(onebotv11.FaceType{ ID: 123 }). Image(\\\"https://ecosystem.vuejs.press/images/hero.png\\\") } else { reply = message.NewReply(msg).join(msg) } a.SendMessage(reply) a.SendMessage(reply) a.SendMessage(reply) return true } \",\"提示\",\"你可能会发现上面的连续写了三次 a.SendMessage(reply)\",\"插件就应该能连续回复多个消息，为什么不呢？\",\"之后的 适配器行为 中的 CallAction() 也是一样。\"]},\"36\":{\"c\":[\"文档\"]},\"37\":{\"c\":[\"插件\",\"消息\"]},\"38\":{\"h\":\"你的第一个插件\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\",\"在这里，我们以 Echo 插件为例：\",\"插件的主体是一个 plugin.GonePlugin 类型，你可以在全局使用 大驼峰命名法 定义它，并在 init() 方法中确定它字段的具体内容：\",\"package echo import ( \\\"github.com/gonebot-dev/gonebot/plugin\\\" ) var Echo plugin.GonePlugin func init() { Echo.Name = \\\"Echo\\\" Echo.Version = \\\"v0.1.1\\\" Echo.Description = \\\"计算机学说话\\\" } \",\"接下来，需要定义插件的 Handlers 字段，它是一个 []plugin.GoneHandler 类型，包含一个或多个 plugin.GoneHandler 类型的元素：\",\"Echo 插件只需要一个 plugin.GoneHandler，在 plugin.GoneHandler 中，我们需要定义该响应器的 Rule 和 Handler 字段，分别表示该响应器的消息筛选规则和响应函数：\",\"package echo import ( \\\"github.com/gonebot-dev/gonebot/adapter\\\" \\\"github.com/gonebot-dev/gonebot/message\\\" \\\"github.com/gonebot-dev/gonebot/plugin\\\" \\\"github.com/gonebot-dev/gonebot/plugin/rule\\\" ) var Echo plugin.GonePlugin func init() { Echo.Name = \\\"Echo\\\" Echo.Version = \\\"v0.1.1\\\" Echo.Description = \\\"Reply the same message of what you have sent\\\" Echo.Handlers = append(Echo.Handlers, plugin.GoneHandler{ Rules: rule.NewRules(rule.ToMe()).And(rule.Command(\\\"echo\\\")), Handler: func(a *adapter.Adapter, msg message.Message) bool { reply := message.NewReply(msg).Join(msg) a.SendMessage(reply) return true }, }) } \",\"我们先来看 Rules 字段：\",\"Rules: rule.NewRules(rule.ToMe()).And(rule.Command(\\\"echo\\\")) \",\"Rules 字段可以由若干的规则构成，每个规则之间可以指定逻辑关系，收到的消息符合 Rules 中的规则，才会被传递给响应器。\",\"Rules 字段的具体介绍由 响应器规则 给出。\",\"接下来是 Handler 字段：\",\"Handler: func(a *adapter.Adapter, msg message.Message) bool { reply := message.NewReply(msg).Join(msg) a.SendMessage(reply) return true } \",\"Handler 字段是一个 func(a *adapter.Adapter, msg message.Message) bool，它接收的两个参数分别为 当前收到消息的适配器 和 当前收到的消息内容，它返回一个 bool 值，表示在该响应器处理完消息后，是否继续将消息传递给下一个响应器。\",\"提示\",\"响应器的响应顺序与插件的加载顺序以及插件中 plugin.GoneHandler 的编写顺序有关，排得越前，响应越早。\",\"你可以使用 message.NewReply() 快速创建一个空响应，在 Echo 中，插件需要返回和原消息完全一样的内容，你可以使用 Join() 将消息的内容合并进响应中。\",\"之后，你可以调用 a.SendMessage 将响应移交给适配器处理。\",\"提示\",\"响应器可不止能做这些！，前往 消息类型 和 适配器行为 了解更多！\",\"到这里，你应该已经完成了你的第一个插件的编写，恭喜你！接下来，你可以去详细了解 响应器规则，消息类型 和 适配器行为 的更多写法了！\"]},\"39\":{\"c\":[\"文档\"]},\"40\":{\"c\":[\"插件\"]},\"41\":{\"h\":\"响应器规则\",\"t\":[\"注意\",\"编写此文档时，GoneBot 版本为 v1.1.4\"]},\"42\":{\"h\":\"简介\",\"t\":[\"响应器规则的写法非常简洁，但它仍然功能齐全，能满足各种复杂的规则需求。\",\"你可以使用 rule.NewRule() 来创建一个新的响应规则组，你必须为规则组指定第一个规则，如果你不需要添加规则，你可以使用 rule.NewRule(rule.Always()) 来让响应器始终响应收到的消息。\"]},\"43\":{\"h\":\"内置规则\",\"t\":[\"GoneBot 内置了一系列常用的规则，你可以直接使用它们来创建规则组：\",\"rule.Always() 始终返回 true，即始终响应收到的消息。\",\"// Always always returns true func Always() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return true }, } } \",\"rule.Never() 始终返回 false，即始终不响应收到的消息。\",\"// Never never returns true func Never() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return false }, } } \",\"rule.Command() 在消息开头包含 COMMAND_START 加上其中指定的任一命令时返回 true。\",\"func Command(prefixList ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, prefix := range prefixList { if strings.HasPrefix( msg.GetRawText(), configurations.GetConf(\\\"COMMAND_START\\\")+prefix, ) { return true } } return false }, } } \",\"提示\",\"COMMAND_START 在 .env 文件中指定，默认为 /\",\"在 rule.Command() 中可以填入若干条字符串，只要消息开头包含 COMMAND_START+其中任一字符串，就会返回 true，之后的一些内置响应规则也是如此。\",\"rule.FullMatch() 在消息完全匹配指定的若干条字符串时返回 true。\",\"func FullMatch(strs ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, str := range strs { if str == msg.GetRawText() { return true } } return false }, } } \",\"rule.Keyword() 在消息中包含指定的若干条字符串中的任一条时返回 true。\",\"如果 forceStart 为 true，则要求消息中包含的该字符串一定要在消息的开头。\",\"func Keyword(forceStart bool, keywords ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, keyword := range keywords { if forceStart && strings.HasPrefix(msg.GetRawText(), keyword) { return true } if !forceStart && strings.Contains(msg.GetRawText(), keyword) { return true } } return false }, } } \",\"rule.RegEx() 允许你传入若干个正则表达式字符串，只要消息能被其中任一正则表达式匹配，就会返回 true。\",\"同时，正则表达式可能会编译错误，为了更清晰的错误信息，你需要传入插件名称来标记使用该规则的插件。\",\"func RegEx(pluginName string, exprs ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, expr := range exprs { reg, err := regexp.Compile(expr) if err != nil { log.Printf(\\\"[GONEBOT] | %s: RegEx filter rule compilation error!\\\\n\\\", pluginName) return false } if reg.FindStringIndex(msg.GetRawText()) != nil { return true } } return false }, } } \",\"rule.ToMe() 在消息体的 IsToMe 字段为 true 时返回 true。\",\"func ToMe() *Rule { return &Rule{ Filter: func(msg message.Message) bool { return msg.IsToMe }, } } \",\"提示\",\"IsToMe 字段由适配器决定，例如在 QQ 机器人中，如果消息开头包含 @机器人QQ号，或者有事件是针对机器人的（如戳一戳），则 IsToMe 为 true。\",\"rule.OfType() 在消息段的第一段的 Type 字段和 AdapterName 字段都匹配指定的字符串时返回 true。\",\"func OfType(typeName, adapterName string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { return msg.GetSegments()[0].Type == typeName && msg.GetSegments()[0].Data.AdapterName() == adapterName }, } } \",\"rule.Notice() 在消息中包含指定的若干类型中的任一种时返回 true。\",\"func Notice(typeList ...string) *Rule { return &Rule{ Filter: func(msg message.Message) bool { for _, typeName := range typeList { for _, segment := range msg.GetSegments() { if segment.Type == typeName { return true } } } return false }, } } \"]},\"44\":{\"h\":\"自定义规则\",\"t\":[\"如果内置规则不能满足你的要求，你可以自定义规则，只需要像这样创建一个新的 *rule.Rule 类型就可以：\",\"Rules: rule.NewRule(rule.IsToMe()).And(&rule.Rule{ Filter: func(msg message.Message) bool { if strings.HasSuffix(msg.GetRawText(), \\\"喵～\\\") { return true } return false } }) \",\"这样就创建了一个检测消息末尾是否为 喵～ 的规则，并且只有当消息是 IsToMe 时才会触发。\"]},\"45\":{\"h\":\"连接规则\",\"t\":[\"rule.NewRule() 创建了一个规则块，其中可以包含多个规则，它们之间可以使用 And() 和 Or() 来连接，这些规则会按照连接顺序依次运算，最后得到结果。\",\"如果你需要多个规则块协同运作，你可以使用 rule.AndRules() 和 rule.OrRules() 来为规则块连接一个新的规则块，运算规则同理。\",\"例如，你需要你的机器人响应 @自己 并且包含 111 的消息，或者是针对自己的戳一戳消息：\",\"Rules: rule.NewRule(rule.IsToMe()).And(rule.Keyword(false, \\\"111\\\")). AndRules(rule.NewRule(rule.IsToMe()).And(rule.Notice(\\\"group_poke\\\", \\\"friend_poke\\\"))) \",\"提示\",\"这样构造的规则可能会很长，可以适当换行以更清楚的区分各规则块。\"]},\"46\":{\"c\":[\"文档\"]},\"47\":{\"c\":[\"插件\",\"规则\"]}},\"dirtCount\":0,\"index\":[[\"或者是针对自己的戳一戳消息\",{\"1\":{\"45\":1}}],[\"或者有事件是针对机器人的\",{\"1\":{\"43\":1}}],[\"运算规则同理\",{\"1\":{\"45\":1}}],[\"运行\",{\"2\":{\"6\":1}}],[\"最后得到结果\",{\"1\":{\"45\":1}}],[\"创建了一个规则块\",{\"1\":{\"45\":1}}],[\"创建一条新的消息\",{\"1\":{\"34\":1}}],[\"连接规则\",{\"0\":{\"45\":1}}],[\"喵～\",{\"1\":{\"44\":2}}],[\"自己\",{\"1\":{\"45\":1}}],[\"自定义规则\",{\"0\":{\"44\":1}}],[\"自然不会有对应的添加方法\",{\"1\":{\"34\":1}}],[\"则\",{\"1\":{\"43\":1}}],[\"则要求消息中包含的该字符串一定要在消息的开头\",{\"1\":{\"43\":1}}],[\"机器人qq号\",{\"1\":{\"43\":1}}],[\"机器人中\",{\"1\":{\"43\":1}}],[\"机器人配置成功了\",{\"1\":{\"4\":1}}],[\"|\",{\"1\":{\"43\":1}}],[\"log\",{\"1\":{\"43\":1}}],[\"lagrange\",{\"1\":{\"3\":7,\"4\":3}}],[\"正则表达式可能会编译错误\",{\"1\":{\"43\":1}}],[\"同时\",{\"1\":{\"43\":1}}],[\"允许你传入若干个正则表达式字符串\",{\"1\":{\"43\":1}}],[\"为了更清晰的错误信息\",{\"1\":{\"43\":1}}],[\"为\",{\"1\":{\"43\":2}}],[\"为什么不呢\",{\"1\":{\"35\":1}}],[\"就会返回\",{\"1\":{\"43\":2}}],[\"默认为\",{\"1\":{\"43\":1}}],[\"默认配置了\",{\"1\":{\"4\":2}}],[\"+prefix\",{\"1\":{\"43\":1}}],[\"加上其中指定的任一命令时返回\",{\"1\":{\"43\":1}}],[\"即始终不响应收到的消息\",{\"1\":{\"43\":1}}],[\"即始终响应收到的消息\",{\"1\":{\"43\":1}}],[\"即可\",{\"1\":{\"18\":1}}],[\"始终返回\",{\"1\":{\"43\":2}}],[\"能满足各种复杂的规则需求\",{\"1\":{\"42\":1}}],[\"能够正常工作\",{\"1\":{\"10\":1}}],[\"恭喜你\",{\"1\":{\"38\":1}}],[\"到这里\",{\"1\":{\"38\":1}}],[\"前往\",{\"1\":{\"38\":1}}],[\"前言\",{\"0\":{\"22\":1}}],[\"之后\",{\"1\":{\"38\":1}}],[\"之后的一些内置响应规则也是如此\",{\"1\":{\"43\":1}}],[\"之后的\",{\"1\":{\"35\":1}}],[\"响应越早\",{\"1\":{\"38\":1}}],[\"响应器可不止能做这些\",{\"1\":{\"38\":1}}],[\"响应器可以通过这些接口\",{\"1\":{\"28\":1}}],[\"响应器的响应顺序与插件的加载顺序以及插件中\",{\"1\":{\"38\":1}}],[\"响应器规则的写法非常简洁\",{\"1\":{\"42\":1}}],[\"响应器规则\",{\"0\":{\"41\":1},\"1\":{\"38\":2}}],[\"排得越前\",{\"1\":{\"38\":1}}],[\"是否继续将消息传递给下一个响应器\",{\"1\":{\"38\":1}}],[\"是否正确\",{\"1\":{\"28\":1}}],[\"表示在该响应器处理完消息后\",{\"1\":{\"38\":1}}],[\"表情\",{\"1\":{\"34\":1}}],[\"值\",{\"1\":{\"38\":1}}],[\"给出\",{\"1\":{\"38\":1}}],[\"才会被传递给响应器\",{\"1\":{\"38\":1}}],[\"收到的消息符合\",{\"1\":{\"38\":1}}],[\"收到的消息都由适配器给出\",{\"1\":{\"33\":1}}],[\"分别表示该响应器的消息筛选规则和响应函数\",{\"1\":{\"38\":1}}],[\"分别从\",{\"1\":{\"19\":1}}],[\"包含一个或多个\",{\"1\":{\"38\":1}}],[\"需要定义插件的\",{\"1\":{\"38\":1}}],[\"接下来是\",{\"1\":{\"38\":1}}],[\"接下来\",{\"1\":{\"38\":2}}],[\"计算机学说话\",{\"1\":{\"38\":1}}],[\"定义它\",{\"1\":{\"38\":1}}],[\"定义了消息类型的方法\",{\"1\":{\"33\":1}}],[\"大驼峰命名法\",{\"1\":{\"38\":1}}],[\"error\",{\"1\":{\"43\":1}}],[\"err\",{\"1\":{\"43\":2}}],[\"expr\",{\"1\":{\"43\":2}}],[\"exprs\",{\"1\":{\"43\":2}}],[\"env\",{\"1\":{\"43\":1}}],[\"else\",{\"1\":{\"35\":1}}],[\"ecosystem\",{\"1\":{\"34\":2,\"35\":1}}],[\"echo\",{\"1\":{\"4\":3,\"38\":19}}],[\"当前收到的消息内容\",{\"1\":{\"38\":1}}],[\"当前收到消息的适配器\",{\"1\":{\"38\":1}}],[\"当你构造好一条消息\",{\"1\":{\"35\":1}}],[\"当然\",{\"1\":{\"34\":1}}],[\"join\",{\"1\":{\"34\":2,\"35\":1,\"38\":3}}],[\"json\",{\"1\":{\"3\":1}}],[\"想把它们连在一起\",{\"1\":{\"34\":1}}],[\"像这样为刚刚的消息添加一个\",{\"1\":{\"34\":1}}],[\"像上面这样\",{\"1\":{\"34\":1}}],[\"通用的消息类型\",{\"1\":{\"34\":1}}],[\"内置了一系列常用的规则\",{\"1\":{\"43\":1}}],[\"内置了一些简单\",{\"1\":{\"34\":1}}],[\"内置规则\",{\"0\":{\"43\":1}}],[\"内容\",{\"1\":{\"3\":1}}],[\"不推荐使用\",{\"1\":{\"34\":1}}],[\"不能正常关闭\",{\"1\":{\"14\":1}}],[\"时才会触发\",{\"1\":{\"44\":1}}],[\"时返回\",{\"1\":{\"43\":1}}],[\"时\",{\"1\":{\"34\":1}}],[\"时正常退出\",{\"1\":{\"14\":1}}],[\"类似\",{\"1\":{\"34\":1}}],[\"类型就可以\",{\"1\":{\"44\":1}}],[\"类型的元素\",{\"1\":{\"38\":1}}],[\"类型\",{\"1\":{\"11\":1,\"38\":2}}],[\"而只需关心消息的具体内容\",{\"1\":{\"33\":1}}],[\"而如果发现实际上是适配器的问题\",{\"1\":{\"28\":1}}],[\"每个规则之间可以指定逻辑关系\",{\"1\":{\"38\":1}}],[\"每个适配器可能会实现不同的消息类型\",{\"1\":{\"33\":1}}],[\"每个消息段代表一段特殊类型的消息\",{\"1\":{\"33\":1}}],[\"重要的是它所属的适配器\",{\"1\":{\"33\":1}}],[\"来为规则块连接一个新的规则块\",{\"1\":{\"45\":1}}],[\"来连接\",{\"1\":{\"45\":1}}],[\"来连接两条消息\",{\"1\":{\"34\":1}}],[\"来让响应器始终响应收到的消息\",{\"1\":{\"42\":1}}],[\"来创建一个新的响应规则组\",{\"1\":{\"42\":1}}],[\"来添加任意的消息类型\",{\"1\":{\"34\":1}}],[\"来读取它们\",{\"1\":{\"33\":1}}],[\"来测试它们\",{\"1\":{\"4\":1}}],[\"data\",{\"1\":{\"33\":2,\"34\":5,\"43\":1}}],[\"describes\",{\"1\":{\"33\":2}}],[\"description\",{\"1\":{\"29\":1,\"38\":2}}],[\"dev\",{\"1\":{\"4\":1,\"38\":5}}],[\"demo\",{\"1\":{\"4\":1}}],[\"`\",{\"1\":{\"33\":2}}],[\"`json\",{\"1\":{\"33\":2}}],[\"orrules\",{\"1\":{\"45\":1}}],[\"or\",{\"1\":{\"45\":1}}],[\"only\",{\"1\":{\"33\":1}}],[\"onebot\",{\"1\":{\"3\":9,\"4\":4}}],[\"onebotv11\",{\"0\":{\"3\":1},\"1\":{\"3\":2,\"4\":1,\"29\":2,\"34\":1,\"35\":3}}],[\"oftype\",{\"1\":{\"43\":2}}],[\"of\",{\"1\":{\"33\":1,\"38\":1}}],[\"对于一个消息类型\",{\"1\":{\"33\":1}}],[\"对于消息类型\",{\"1\":{\"33\":1}}],[\"对于适配器定义的消息类型\",{\"1\":{\"34\":1}}],[\"对于适配器\",{\"1\":{\"28\":2}}],[\"等\",{\"1\":{\"33\":1}}],[\"等待几秒后\",{\"1\":{\"4\":1}}],[\"图片image\",{\"1\":{\"33\":1}}],[\"文件中指定\",{\"1\":{\"43\":1}}],[\"文本text\",{\"1\":{\"33\":1}}],[\"文档\",{\"0\":{\"0\":1},\"2\":{\"1\":1,\"8\":1,\"15\":1,\"20\":1,\"23\":1,\"26\":1,\"30\":1,\"36\":1,\"39\":1,\"46\":1}}],[\"拆分为若干个\",{\"1\":{\"33\":1}}],[\"了解更多\",{\"1\":{\"38\":1}}],[\"了解消息类型对于编写插件非常重要\",{\"1\":{\"33\":1}}],[\"了解适配器的部分开发要求吧\",{\"1\":{\"22\":1}}],[\"所有的逻辑都围绕消息处理展开\",{\"1\":{\"33\":1}}],[\"所指定的\",{\"1\":{\"13\":1}}],[\"消息发送\",{\"0\":{\"35\":1}}],[\"消息的构造方式和\",{\"1\":{\"34\":1}}],[\"消息构造\",{\"0\":{\"34\":1}}],[\"消息段\",{\"1\":{\"33\":1}}],[\"消息\",{\"1\":{\"33\":1},\"2\":{\"37\":1}}],[\"消息是聊天机器人最为重要的部分\",{\"1\":{\"33\":1}}],[\"消息类型\",{\"0\":{\"32\":1},\"1\":{\"38\":2}}],[\"bool\",{\"1\":{\"29\":1,\"33\":1,\"35\":1,\"38\":4,\"43\":10,\"44\":1}}],[\"bot\",{\"1\":{\"4\":2}}],[\"keywords\",{\"1\":{\"43\":2}}],[\"keyword\",{\"1\":{\"29\":1,\"43\":5,\"45\":1}}],[\"n\",{\"1\":{\"43\":1}}],[\"nil\",{\"1\":{\"43\":2}}],[\"nickname=\",{\"1\":{\"4\":1}}],[\"never\",{\"1\":{\"43\":4}}],[\"newmessage\",{\"1\":{\"34\":3}}],[\"newrule\",{\"1\":{\"42\":2,\"44\":1,\"45\":3}}],[\"newrules\",{\"1\":{\"29\":1,\"38\":2}}],[\"newreply\",{\"1\":{\"29\":1,\"34\":4,\"35\":2,\"38\":3}}],[\"notice\",{\"1\":{\"33\":1,\"43\":2,\"45\":1}}],[\"name\",{\"1\":{\"29\":1,\"35\":2,\"38\":2}}],[\"vuejs\",{\"1\":{\"34\":2,\"35\":1}}],[\"videotype\",{\"1\":{\"34\":1}}],[\"video\",{\"1\":{\"34\":4}}],[\"voicetype\",{\"1\":{\"34\":1}}],[\"voice\",{\"1\":{\"34\":4}}],[\"v0\",{\"1\":{\"29\":1,\"38\":2}}],[\"version\",{\"1\":{\"29\":1,\"38\":2}}],[\"var\",{\"1\":{\"29\":1,\"35\":1,\"38\":2}}],[\"v11\",{\"1\":{\"3\":2,\"4\":1}}],[\"v1\",{\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"例如在\",{\"1\":{\"43\":1}}],[\"例如\",{\"1\":{\"29\":1,\"33\":1,\"34\":1,\"45\":1}}],[\"请检查你调用的\",{\"1\":{\"28\":1}}],[\"请继续前往下一个板块\",{\"1\":{\"22\":1}}],[\"<\",{\"1\":{\"28\":1}}],[\"==\",{\"1\":{\"35\":1,\"43\":4}}],[\"=\",{\"1\":{\"28\":3,\"29\":4,\"34\":3,\"35\":2,\"38\":9,\"43\":9}}],[\"friend\",{\"1\":{\"45\":1}}],[\"fullmatch\",{\"1\":{\"43\":2}}],[\"func\",{\"1\":{\"28\":1,\"29\":2,\"34\":5,\"35\":1,\"38\":5,\"43\":18,\"44\":1}}],[\"facetype\",{\"1\":{\"34\":1,\"35\":1}}],[\"false\",{\"1\":{\"29\":1,\"43\":8,\"44\":1,\"45\":1}}],[\"findstringindex\",{\"1\":{\"43\":1}}],[\"finalize\",{\"1\":{\"9\":2,\"14\":1}}],[\"filter\",{\"1\":{\"43\":10,\"44\":1}}],[\"filetype\",{\"1\":{\"34\":1}}],[\"file\",{\"1\":{\"34\":16}}],[\"forcestart\",{\"1\":{\"43\":4}}],[\"for\",{\"1\":{\"29\":1,\"33\":2,\"43\":6}}],[\"用于消息筛选等\",{\"1\":{\"33\":1}}],[\"用于调用适配器行为\",{\"1\":{\"28\":1}}],[\"用来处理\",{\"1\":{\"19\":1}}],[\"useful\",{\"1\":{\"33\":1}}],[\"userid\",{\"1\":{\"29\":1}}],[\"use\",{\"1\":{\"28\":1}}],[\"uin\",{\"1\":{\"3\":1}}],[\"you\",{\"1\":{\"28\":2,\"38\":1}}],[\"尝试让适配器执行它定义的行为\",{\"1\":{\"28\":1}}],[\"合并转发等\",{\"1\":{\"28\":1}}],[\"戳一戳\",{\"1\":{\"28\":1}}],[\"简介\",{\"0\":{\"28\":1,\"33\":1,\"42\":1}}],[\"具体实现还是由开发者自行决定\",{\"1\":{\"22\":1}}],[\"只需要像这样创建一个新的\",{\"1\":{\"44\":1}}],[\"只需要填写\",{\"1\":{\"18\":1}}],[\"只要消息能被其中任一正则表达式匹配\",{\"1\":{\"43\":1}}],[\"只要消息开头包含\",{\"1\":{\"43\":1}}],[\"只能给出一个大致的规范\",{\"1\":{\"22\":1}}],[\"无法直接被你修改\",{\"1\":{\"33\":1}}],[\"无法对适配器给出一个完全严格可控的标准\",{\"1\":{\"22\":1}}],[\"无论调用结果如何\",{\"1\":{\"13\":1}}],[\"因此\",{\"1\":{\"22\":1,\"28\":1,\"33\":2,\"34\":1}}],[\"因为\",{\"1\":{\"18\":1}}],[\"其行为可能会大不相同\",{\"1\":{\"22\":1}}],[\"其中可以包含多个规则\",{\"1\":{\"45\":1}}],[\"其中\",{\"1\":{\"9\":1,\"33\":1}}],[\"其中的\",{\"1\":{\"3\":1}}],[\"由于适配器对接不同的平台\",{\"1\":{\"22\":1}}],[\"由于适配器尚未开发完全\",{\"1\":{\"3\":1}}],[\"没了\",{\"1\":{\"19\":1}}],[\"卧槽\",{\"1\":{\"19\":1}}],[\"也是一样\",{\"1\":{\"35\":1}}],[\"也可以使用\",{\"1\":{\"34\":1}}],[\"也创建了对应的接口\",{\"1\":{\"28\":1}}],[\"也在使用这个方法\",{\"1\":{\"18\":1}}],[\"也就是适配器的启动和销毁\",{\"1\":{\"9\":1}}],[\"id\",{\"1\":{\"34\":1,\"35\":1}}],[\"import\",{\"1\":{\"38\":2}}],[\"implement\",{\"1\":{\"33\":1}}],[\"implements\",{\"1\":{\"33\":1}}],[\"implementations\",{\"1\":{\"3\":2}}],[\"images\",{\"1\":{\"34\":2,\"35\":1}}],[\"imagetype\",{\"1\":{\"34\":1}}],[\"image\",{\"1\":{\"34\":6,\"35\":1}}],[\"istome\",{\"1\":{\"33\":1,\"43\":4,\"44\":2,\"45\":2}}],[\"is\",{\"1\":{\"33\":6}}],[\"isreceive\",{\"1\":{\"18\":1}}],[\"in\",{\"1\":{\"33\":1}}],[\"interface\",{\"1\":{\"33\":2}}],[\"init\",{\"1\":{\"29\":1,\"38\":3}}],[\"initialize\",{\"1\":{\"28\":1}}],[\"it\",{\"1\":{\"33\":2}}],[\"i\",{\"1\":{\"28\":1,\"33\":1}}],[\"if\",{\"1\":{\"28\":1,\"35\":1,\"43\":7,\"44\":1}}],[\"第二个参数是\",{\"1\":{\"18\":1}}],[\"第一次启动\",{\"1\":{\"3\":1}}],[\"供\",{\"1\":{\"18\":1}}],[\"发现真的好少\",{\"1\":{\"17\":1}}],[\"整理了一下\",{\"1\":{\"17\":1}}],[\"整理了一些适配器中常用的方法\",{\"1\":{\"17\":1}}],[\"本章节中\",{\"1\":{\"17\":1}}],[\"常用方法\",{\"0\":{\"17\":1}}],[\"将响应移交给适配器处理\",{\"1\":{\"38\":1}}],[\"将消息的内容合并进响应中\",{\"1\":{\"38\":1}}],[\"将消息塞入适配器的收取消息队列\",{\"1\":{\"11\":1}}],[\"将收到的已经规范化的消息推送到接收通道中\",{\"1\":{\"18\":1}}],[\"将会尝试修复这个问题\",{\"1\":{\"14\":1}}],[\"还无法在用户使用\",{\"1\":{\"14\":1}}],[\"版本\",{\"1\":{\"14\":1}}],[\"版本为\",{\"1\":{\"2\":1,\"9\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"直到有消息或动作再返回\",{\"1\":{\"19\":1}}],[\"直到\",{\"1\":{\"14\":1}}],[\"否则会导致\",{\"1\":{\"14\":1}}],[\"否则调用该行为的插件会原地卡死\",{\"1\":{\"13\":1}}],[\"但它仍然功能齐全\",{\"1\":{\"42\":1}}],[\"但它们存在而且可能非常有用\",{\"1\":{\"28\":1}}],[\"但你可以通过\",{\"1\":{\"34\":1}}],[\"但这并不意味着你可以随意阻塞线程\",{\"1\":{\"14\":1}}],[\"但相关的\",{\"1\":{\"4\":1}}],[\"结束\",{\"0\":{\"14\":1}}],[\"🫵🫵🫵\",{\"1\":{\"13\":1}}],[\"我警告你\",{\"1\":{\"13\":1}}],[\"我们先来看\",{\"1\":{\"38\":1}}],[\"我们需要定义该响应器的\",{\"1\":{\"38\":1}}],[\"我们以\",{\"1\":{\"38\":1}}],[\"我们将一段\",{\"1\":{\"33\":1}}],[\"我们提供了\",{\"1\":{\"28\":1}}],[\"我们准备了\",{\"1\":{\"4\":1}}],[\"我们会假设你已经在本地安装了\",{\"1\":{\"3\":1}}],[\"会传入适配器指针\",{\"1\":{\"35\":1}}],[\"会卡死并阻塞当前响应器\",{\"1\":{\"28\":1}}],[\"会依次调用所有适配器的\",{\"1\":{\"14\":1}}],[\"会将这些调用塞入适配器的\",{\"1\":{\"13\":1}}],[\"会从此队列中取出消息\",{\"1\":{\"11\":1}}],[\"的消息\",{\"1\":{\"45\":1}}],[\"的规则\",{\"1\":{\"44\":1}}],[\"的更多写法了\",{\"1\":{\"38\":1}}],[\"的编写顺序有关\",{\"1\":{\"38\":1}}],[\"的定义如下\",{\"1\":{\"33\":1}}],[\"的文本时调用\",{\"1\":{\"29\":1}}],[\"的戳一戳等\",{\"1\":{\"13\":1}}],[\"的一个\",{\"1\":{\"4\":1}}],[\"如戳一戳\",{\"1\":{\"43\":1}}],[\"如\",{\"1\":{\"13\":1,\"28\":1}}],[\"如果内置规则不能满足你的要求\",{\"1\":{\"44\":1}}],[\"如果消息开头包含\",{\"1\":{\"43\":1}}],[\"如果\",{\"1\":{\"43\":1}}],[\"如果适配器没有返回结果到\",{\"1\":{\"28\":1}}],[\"如果你需要多个规则块协同运作\",{\"1\":{\"45\":1}}],[\"如果你不需要添加规则\",{\"1\":{\"42\":1}}],[\"如果你已经得到了两个现成的消息体\",{\"1\":{\"34\":1}}],[\"如果你发现这种情况\",{\"1\":{\"28\":1}}],[\"如果你遇到了一款非常不稳定但不得不用的适配器\",{\"1\":{\"22\":1}}],[\"如果你看到了类似上面的日志输出\",{\"1\":{\"4\":1}}],[\"如果聊天平台实现了一些自定义行为\",{\"1\":{\"13\":1}}],[\"3\",{\"0\":{\"13\":1}}],[\"2\",{\"0\":{\"12\":1}}],[\"25565\",{\"1\":{\"3\":3,\"4\":2}}],[\"texttype\",{\"1\":{\"34\":1}}],[\"text\",{\"1\":{\"29\":1,\"33\":2,\"34\":8,\"35\":1}}],[\"testing\",{\"1\":{\"29\":1}}],[\"test\",{\"1\":{\"29\":2}}],[\"trial\",{\"1\":{\"29\":1}}],[\"true\",{\"1\":{\"11\":1,\"18\":1,\"29\":1,\"35\":1,\"38\":2,\"43\":21,\"44\":1}}],[\"the\",{\"1\":{\"28\":1,\"33\":4,\"38\":1}}],[\"this\",{\"1\":{\"28\":1,\"33\":8}}],[\"together\",{\"1\":{\"33\":1}}],[\"torawtext\",{\"1\":{\"33\":1}}],[\"tome\",{\"1\":{\"29\":1,\"38\":2,\"43\":2}}],[\"to\",{\"1\":{\"28\":2,\"33\":3,\"34\":5}}],[\"typelist\",{\"1\":{\"43\":2}}],[\"typename\",{\"1\":{\"33\":1,\"43\":4}}],[\"type\",{\"1\":{\"3\":1,\"28\":1,\"33\":8,\"34\":5,\"43\":3}}],[\"m\",{\"1\":{\"34\":15}}],[\"me\",{\"1\":{\"33\":1}}],[\"messagetype\",{\"1\":{\"33\":4}}],[\"messagesegment\",{\"1\":{\"33\":3,\"34\":5}}],[\"message\",{\"1\":{\"11\":1,\"28\":1,\"29\":4,\"33\":14,\"34\":28,\"35\":6,\"38\":11,\"43\":18,\"44\":2}}],[\"man\",{\"1\":{\"28\":1}}],[\"make\",{\"1\":{\"28\":1,\"33\":1}}],[\"msg\",{\"1\":{\"11\":1,\"29\":2,\"33\":1,\"34\":4,\"35\":4,\"38\":7,\"43\":18,\"44\":2}}],[\"poke\",{\"1\":{\"45\":2}}],[\"port\",{\"1\":{\"3\":1}}],[\"printf\",{\"1\":{\"43\":1}}],[\"prefix\",{\"1\":{\"43\":1}}],[\"prefixlist\",{\"1\":{\"43\":2}}],[\"press\",{\"1\":{\"34\":2,\"35\":1}}],[\"package\",{\"1\":{\"38\":2}}],[\"part\",{\"1\":{\"33\":1}}],[\"png\",{\"1\":{\"34\":2,\"35\":1}}],[\"plain\",{\"1\":{\"34\":1}}],[\"pluginname\",{\"1\":{\"43\":2}}],[\"plugin\",{\"1\":{\"29\":3,\"38\":12}}],[\"push\",{\"1\":{\"11\":1,\"28\":2}}],[\"规定的\",{\"1\":{\"11\":1}}],[\"规则\",{\"2\":{\"47\":1}}],[\"规则的定义会在之后的章节中给出\",{\"1\":{\"4\":1}}],[\"规则会以该配置作为前缀识别\",{\"1\":{\"4\":1}}],[\"防止泄漏\",{\"1\":{\"9\":1,\"14\":1}}],[\"关闭时\",{\"1\":{\"14\":1}}],[\"关闭时调用\",{\"1\":{\"9\":1}}],[\"关于\",{\"1\":{\"4\":1}}],[\"方法中确定它字段的具体内容\",{\"1\":{\"38\":1}}],[\"方法中启动自己的业务逻辑\",{\"1\":{\"9\":1}}],[\"方法来发送私发消息\",{\"1\":{\"29\":1}}],[\"方法调用它\",{\"1\":{\"29\":1}}],[\"方法启动之后\",{\"1\":{\"10\":1}}],[\"方法会在\",{\"1\":{\"9\":1}}],[\"方法会通过\",{\"1\":{\"9\":1}}],[\"方法\",{\"1\":{\"9\":1,\"14\":1,\"28\":1},\"2\":{\"21\":1}}],[\"方法和\",{\"1\":{\"9\":1}}],[\"开始\",{\"0\":{\"10\":1},\"1\":{\"9\":1}}],[\"中可以填入若干条字符串\",{\"1\":{\"43\":1}}],[\"中的规则\",{\"1\":{\"38\":1}}],[\"中的\",{\"1\":{\"35\":1}}],[\"中添加并连接它们\",{\"1\":{\"34\":1}}],[\"中取出一个消息或动作\",{\"1\":{\"19\":1}}],[\"中\",{\"1\":{\"9\":1,\"33\":1,\"35\":1,\"38\":2}}],[\"在消息中包含指定的若干类型中的任一种时返回\",{\"1\":{\"43\":1}}],[\"在消息中包含指定的若干条字符串中的任一条时返回\",{\"1\":{\"43\":1}}],[\"在消息段的第一段的\",{\"1\":{\"43\":1}}],[\"在消息体的\",{\"1\":{\"43\":1}}],[\"在消息完全匹配指定的若干条字符串时返回\",{\"1\":{\"43\":1}}],[\"在消息开头包含\",{\"1\":{\"43\":1}}],[\"在这里\",{\"1\":{\"38\":1}}],[\"在这之后的内容\",{\"1\":{\"33\":1}}],[\"在完全有把握之前\",{\"1\":{\"34\":1}}],[\"在适配器已经实现了对应行为的情况下\",{\"1\":{\"29\":1}}],[\"在没有消息或动作时会阻塞线程\",{\"1\":{\"19\":1}}],[\"在之后的版本中\",{\"1\":{\"14\":1}}],[\"在经过插件的处理之后\",{\"1\":{\"12\":1}}],[\"在定义上\",{\"1\":{\"9\":1}}],[\"在\",{\"1\":{\"9\":1,\"10\":1,\"14\":1,\"29\":1,\"33\":1,\"35\":1,\"38\":2,\"43\":2}}],[\"在本地测试时\",{\"1\":{\"4\":1}}],[\"生命周期\",{\"0\":{\"9\":1},\"2\":{\"16\":1}}],[\"适配器中\",{\"1\":{\"29\":1}}],[\"适配器行为调用\",{\"0\":{\"29\":1}}],[\"适配器行为的接口定义如下\",{\"1\":{\"28\":1}}],[\"适配器行为\",{\"0\":{\"27\":1},\"1\":{\"35\":1,\"38\":2},\"2\":{\"31\":1}}],[\"适配器需要处理这些行为\",{\"1\":{\"13\":1}}],[\"适配器需要将这些回复以自己的方式发送到聊天平台\",{\"1\":{\"12\":1}}],[\"适配器需要实现\",{\"1\":{\"9\":1}}],[\"适配器应当以自己的方式收取来自聊天平台的消息\",{\"1\":{\"11\":1}}],[\"适配器应当在此方法中释放所有资源\",{\"1\":{\"14\":1}}],[\"适配器应当在此方法中释放资源\",{\"1\":{\"9\":1}}],[\"适配器应当在\",{\"1\":{\"9\":1}}],[\"适配器有一些不得不做的工作\",{\"1\":{\"10\":1}}],[\"适配器\",{\"0\":{\"7\":1},\"2\":{\"16\":1,\"21\":1,\"24\":1}}],[\"适配器的生命周期非常简单\",{\"1\":{\"9\":1}}],[\"适配器的\",{\"1\":{\"3\":1}}],[\"出现的问题\",{\"1\":{\"4\":1}}],[\"它返回一个\",{\"1\":{\"38\":1}}],[\"它接收的两个参数分别为\",{\"1\":{\"38\":1}}],[\"它是一个\",{\"1\":{\"38\":1}}],[\"它的类型名称\",{\"1\":{\"33\":1}}],[\"它们之间可以使用\",{\"1\":{\"45\":1}}],[\"它们可能会定义专属于某个平台的行为\",{\"1\":{\"28\":1}}],[\"它们分别会原封不动地回复相同的消息\",{\"1\":{\"4\":1}}],[\"它会在日志中明确写出问题\",{\"1\":{\"4\":1}}],[\"可以适当换行以更清楚的区分各规则块\",{\"1\":{\"45\":1}}],[\"可以看到\",{\"1\":{\"4\":1}}],[\"可能会一直无法发出链接到\",{\"1\":{\"4\":1}}],[\"有时\",{\"1\":{\"4\":1}}],[\"插件需要返回和原消息完全一样的内容\",{\"1\":{\"38\":1}}],[\"插件只需要一个\",{\"1\":{\"38\":1}}],[\"插件的主体是一个\",{\"1\":{\"38\":1}}],[\"插件的回复会被塞入适配器的发送消息队列\",{\"1\":{\"12\":1}}],[\"插件为例\",{\"1\":{\"38\":1}}],[\"插件就应该能连续回复多个消息\",{\"1\":{\"35\":1}}],[\"插件可能会产生一些行为调用\",{\"1\":{\"13\":1}}],[\"插件\",{\"0\":{\"25\":1},\"1\":{\"4\":2},\"2\":{\"31\":1,\"37\":1,\"40\":1,\"47\":1}}],[\"账号私发\",{\"1\":{\"4\":1}}],[\"两个插件\",{\"1\":{\"4\":1}}],[\"和结束\",{\"1\":{\"9\":1}}],[\"和输出当前服务器的状态信息\",{\"1\":{\"4\":1}}],[\"和\",{\"1\":{\"4\":2,\"19\":1,\"33\":2,\"38\":4,\"45\":2}}],[\"作为指令前缀\",{\"1\":{\"4\":1}}],[\"作为协议服务端为例\",{\"1\":{\"3\":1}}],[\"使用\",{\"1\":{\"4\":1,\"18\":1,\"34\":1}}],[\"使用了如下的配置文件\",{\"1\":{\"4\":1}}],[\"那么恭喜你\",{\"1\":{\"4\":1}}],[\"命令行输出\",{\"1\":{\"4\":1}}],[\"成功连接到\",{\"1\":{\"4\":1}}],[\"你需要你的机器人响应\",{\"1\":{\"45\":1}}],[\"你需要传入插件名称来标记使用该规则的插件\",{\"1\":{\"43\":1}}],[\"你需要通过\",{\"1\":{\"33\":1}}],[\"你必须为规则组指定第一个规则\",{\"1\":{\"42\":1}}],[\"你应该已经完成了你的第一个插件的编写\",{\"1\":{\"38\":1}}],[\"你总是希望将消息发出去\",{\"1\":{\"35\":1}}],[\"你就能快速创建一个同时包含文本和图片的回复\",{\"1\":{\"34\":1}}],[\"你无需关心消息从何而来\",{\"1\":{\"33\":1}}],[\"你都需要塞至少一个结果进入\",{\"1\":{\"13\":1}}],[\"你的第一个插件\",{\"0\":{\"38\":1}}],[\"你的第一个\",{\"1\":{\"4\":1}}],[\"你会看到\",{\"1\":{\"4\":1}}],[\"你可能会发现上面的连续写了三次\",{\"1\":{\"35\":1}}],[\"你可能会漏掉一些需要指定的字段\",{\"1\":{\"34\":1}}],[\"你可能需要尝试自行解决\",{\"1\":{\"22\":1}}],[\"你可能需要前往下方链接先行安装\",{\"1\":{\"3\":1}}],[\"你可能需要先安装\",{\"1\":{\"2\":1}}],[\"你可以自定义规则\",{\"1\":{\"44\":1}}],[\"你可以自由修改它\",{\"1\":{\"4\":1}}],[\"你可以去详细了解\",{\"1\":{\"38\":1}}],[\"你可以调用\",{\"1\":{\"38\":1}}],[\"你可以在全局使用\",{\"1\":{\"38\":1}}],[\"你可以在用户向机器人发送含\",{\"1\":{\"29\":1}}],[\"你可以通过它来判断适配器类型和发送消息\",{\"1\":{\"35\":1}}],[\"你可以通过向\",{\"1\":{\"4\":1}}],[\"你可以直接使用它们来创建规则组\",{\"1\":{\"43\":1}}],[\"你可以直接在\",{\"1\":{\"34\":1}}],[\"你可以直接下载并运行它\",{\"1\":{\"4\":1}}],[\"你可以使用\",{\"1\":{\"29\":1,\"34\":2,\"38\":2,\"42\":2,\"45\":1}}],[\"你可以根据你的实际需求修改具体的地址和端口\",{\"1\":{\"3\":1}}],[\"与之前的\",{\"1\":{\"4\":1}}],[\"地址为\",{\"1\":{\"4\":1}}],[\"s\",{\"1\":{\"43\":1}}],[\"same\",{\"1\":{\"38\":1}}],[\"say\",{\"1\":{\"28\":1}}],[\"sent\",{\"1\":{\"38\":1}}],[\"sendmessage\",{\"1\":{\"35\":4,\"38\":3}}],[\"sender\",{\"1\":{\"33\":1}}],[\"sending\",{\"1\":{\"33\":1}}],[\"sendprivatemessage\",{\"1\":{\"29\":1}}],[\"sendchannel\",{\"1\":{\"12\":1,\"18\":1,\"19\":1}}],[\"self\",{\"1\":{\"33\":1}}],[\"segments\",{\"1\":{\"33\":4}}],[\"segment\",{\"1\":{\"33\":1,\"34\":5,\"43\":2}}],[\"sure\",{\"1\":{\"33\":1}}],[\"suffix\",{\"1\":{\"3\":1}}],[\"simple\",{\"1\":{\"33\":1}}],[\"str\",{\"1\":{\"43\":2}}],[\"strs\",{\"1\":{\"43\":2}}],[\"strings\",{\"1\":{\"43\":3,\"44\":1}}],[\"string\",{\"1\":{\"33\":9,\"34\":5,\"43\":7}}],[\"struct\",{\"1\":{\"28\":2,\"33\":2}}],[\"start+其中任一字符串\",{\"1\":{\"43\":1}}],[\"start\",{\"1\":{\"9\":3,\"10\":1,\"43\":3}}],[\"start=\",{\"1\":{\"4\":1}}],[\"status\",{\"1\":{\"4\":3}}],[\"should\",{\"1\":{\"28\":1}}],[\"range\",{\"1\":{\"43\":6}}],[\"rawtext\",{\"1\":{\"33\":2}}],[\"raw\",{\"1\":{\"33\":1}}],[\"rule\",{\"1\":{\"29\":3,\"38\":8,\"42\":3,\"43\":29,\"44\":6,\"45\":9}}],[\"rules\",{\"1\":{\"29\":1,\"34\":1,\"38\":6,\"44\":1,\"45\":1}}],[\"run\",{\"1\":{\"4\":1}}],[\"reg\",{\"1\":{\"43\":2}}],[\"regexp\",{\"1\":{\"43\":1}}],[\"regex\",{\"1\":{\"43\":3}}],[\"reply\",{\"1\":{\"34\":3,\"35\":7,\"38\":5}}],[\"returns\",{\"1\":{\"43\":2}}],[\"return\",{\"1\":{\"28\":1,\"29\":1,\"34\":5,\"35\":1,\"38\":2,\"43\":25,\"44\":2}}],[\"result\",{\"1\":{\"28\":2}}],[\"resultchannel\",{\"1\":{\"13\":2,\"28\":6}}],[\"receiver\",{\"1\":{\"33\":1}}],[\"receivechannel\",{\"1\":{\"11\":1}}],[\"receiving\",{\"1\":{\"33\":1}}],[\"reconnectinterval\",{\"1\":{\"3\":1}}],[\"reversewebsocket\",{\"1\":{\"3\":1}}],[\"contains\",{\"1\":{\"43\":1}}],[\"configurations\",{\"1\":{\"43\":1}}],[\"convert\",{\"1\":{\"33\":1}}],[\"compilation\",{\"1\":{\"43\":1}}],[\"compile\",{\"1\":{\"43\":1}}],[\"command\",{\"1\":{\"4\":3,\"38\":2,\"43\":7}}],[\"com\",{\"1\":{\"4\":1,\"38\":5}}],[\"create\",{\"1\":{\"33\":1}}],[\"can\",{\"1\":{\"28\":1}}],[\"callaction\",{\"1\":{\"28\":3,\"29\":3,\"35\":1}}],[\"call\",{\"1\":{\"28\":1}}],[\"chan\",{\"1\":{\"28\":2}}],[\"channel\",{\"1\":{\"28\":1}}],[\"ctrl+c\",{\"1\":{\"14\":1}}],[\"cd\",{\"1\":{\"4\":1}}],[\"clone\",{\"1\":{\"4\":1}}],[\"getconf\",{\"1\":{\"43\":1}}],[\"getrawtext\",{\"1\":{\"33\":1,\"43\":5,\"44\":1}}],[\"getsegments\",{\"1\":{\"29\":1,\"33\":1,\"43\":3}}],[\"group\",{\"1\":{\"33\":3,\"45\":1}}],[\"github\",{\"1\":{\"4\":1,\"38\":5}}],[\"git\",{\"1\":{\"4\":2}}],[\"goroutine\",{\"1\":{\"9\":1}}],[\"go\",{\"1\":{\"4\":1}}],[\"gonehandler\",{\"1\":{\"29\":1,\"38\":6}}],[\"goneplugin\",{\"1\":{\"29\":1,\"38\":3}}],[\"gonedemo\",{\"1\":{\"4\":8}}],[\"gonebot\",{\"0\":{\"4\":1},\"1\":{\"2\":1,\"3\":2,\"4\":3,\"9\":3,\"10\":1,\"11\":2,\"13\":1,\"14\":4,\"17\":1,\"18\":1,\"22\":2,\"27\":1,\"28\":1,\"32\":1,\"33\":2,\"34\":2,\"35\":1,\"38\":11,\"41\":1,\"43\":2}}],[\"golang\",{\"1\":{\"2\":1}}],[\"安装\",{\"0\":{\"4\":1},\"2\":{\"6\":1}}],[\"安装好\",{\"1\":{\"3\":1}}],[\"启动行为监听\",{\"0\":{\"13\":1}}],[\"启动消息发送\",{\"0\":{\"12\":1}}],[\"启动消息收取\",{\"0\":{\"11\":1}}],[\"启动\",{\"1\":{\"3\":1,\"9\":1}}],[\"完成配置后\",{\"1\":{\"3\":1}}],[\"端口配置为\",{\"1\":{\"3\":1}}],[\"这样构造的规则可能会很长\",{\"1\":{\"45\":1}}],[\"这样就创建了一个检测消息末尾是否为\",{\"1\":{\"44\":1}}],[\"这样就能创建一条与原消息完全一样的回复\",{\"1\":{\"34\":1}}],[\"这些规则会按照连接顺序依次运算\",{\"1\":{\"45\":1}}],[\"这些行为不能用消息类型表示\",{\"1\":{\"28\":1}}],[\"这两个方法均不需要任何参数\",{\"1\":{\"9\":1}}],[\"这可能并不是\",{\"1\":{\"4\":1}}],[\"这里的地址和端口假定了你在本地运行\",{\"1\":{\"3\":1}}],[\"这配置了一项反向\",{\"1\":{\"3\":1}}],[\"并且包含\",{\"1\":{\"45\":1}}],[\"并且只有当消息是\",{\"1\":{\"44\":1}}],[\"并在\",{\"1\":{\"38\":1}}],[\"并在它生成配置文件后立即退出\",{\"1\":{\"3\":1}}],[\"并使用\",{\"1\":{\"11\":1}}],[\"并输出相关日志\",{\"1\":{\"4\":1}}],[\"并将处理结果塞入传入的\",{\"1\":{\"13\":1}}],[\"并将消息传递给插件\",{\"1\":{\"11\":1}}],[\"并将消息转换为\",{\"1\":{\"11\":1}}],[\"并将\",{\"1\":{\"3\":1}}],[\"并每五秒尝试连接\",{\"1\":{\"3\":1}}],[\"服务器的图片\",{\"1\":{\"4\":1}}],[\"服务\",{\"1\":{\"3\":1}}],[\"world\",{\"1\":{\"34\":3,\"35\":1}}],[\"with\",{\"1\":{\"33\":1}}],[\"will\",{\"1\":{\"28\":1}}],[\"who\",{\"1\":{\"33\":3}}],[\"whole\",{\"1\":{\"33\":1}}],[\"what\",{\"1\":{\"28\":1,\"38\":1}}],[\"which\",{\"1\":{\"28\":2,\"33\":3}}],[\"want\",{\"1\":{\"28\":1}}],[\"websocket\",{\"1\":{\"3\":2,\"4\":1}}],[\"ws\",{\"1\":{\"3\":3,\"4\":2}}],[\"hassuffix\",{\"1\":{\"44\":1}}],[\"hasprefix\",{\"1\":{\"43\":2}}],[\"have\",{\"1\":{\"38\":1}}],[\"handler\",{\"1\":{\"29\":1,\"35\":2,\"38\":5}}],[\"handlers\",{\"1\":{\"29\":2,\"38\":3}}],[\"hero\",{\"1\":{\"34\":2,\"35\":1}}],[\"hello\",{\"1\":{\"29\":1,\"34\":3,\"35\":1}}],[\"heartbeatinterval\",{\"1\":{\"3\":1}}],[\"https\",{\"1\":{\"4\":1,\"34\":2,\"35\":1}}],[\"host=\",{\"1\":{\"4\":1}}],[\"host\",{\"1\":{\"3\":1}}],[\"5000\",{\"1\":{\"3\":2}}],[\"0\",{\"1\":{\"3\":8,\"4\":8,\"29\":1,\"43\":2}}],[\"号用来登录\",{\"1\":{\"3\":1}}],[\"qq\",{\"1\":{\"3\":1,\"4\":2,\"13\":1,\"28\":1,\"34\":1,\"43\":1}}],[\"填入机器人的\",{\"1\":{\"3\":1}}],[\"字段都匹配指定的字符串时返回\",{\"1\":{\"43\":1}}],[\"字段和\",{\"1\":{\"43\":1}}],[\"字段由适配器决定\",{\"1\":{\"43\":1}}],[\"字段为\",{\"1\":{\"43\":1}}],[\"字段是一个\",{\"1\":{\"38\":1}}],[\"字段的具体介绍由\",{\"1\":{\"38\":1}}],[\"字段可以由若干的规则构成\",{\"1\":{\"38\":1}}],[\"字段\",{\"1\":{\"3\":1,\"38\":4}}],[\"字段中的\",{\"1\":{\"3\":1}}],[\"always\",{\"1\":{\"42\":1,\"43\":4}}],[\"all\",{\"1\":{\"33\":2}}],[\"attachsegment\",{\"1\":{\"34\":5}}],[\"attachs\",{\"1\":{\"34\":5}}],[\"added\",{\"1\":{\"33\":1}}],[\"adaptername\",{\"1\":{\"33\":1,\"43\":4}}],[\"adapter\",{\"1\":{\"28\":2,\"29\":2,\"33\":1,\"35\":2,\"38\":7}}],[\"are\",{\"1\":{\"33\":1}}],[\"am\",{\"1\":{\"33\":1}}],[\"an\",{\"1\":{\"34\":1}}],[\"andrules\",{\"1\":{\"45\":2}}],[\"and\",{\"1\":{\"29\":1,\"33\":1,\"38\":2,\"44\":1,\"45\":3}}],[\"any\",{\"1\":{\"28\":5,\"34\":2,\"35\":1}}],[\"append\",{\"1\":{\"29\":1,\"38\":1}}],[\"appsettings\",{\"1\":{\"3\":1}}],[\"a\",{\"1\":{\"28\":2,\"29\":3,\"33\":3,\"34\":4,\"35\":6,\"38\":6}}],[\"automatically\",{\"1\":{\"28\":1}}],[\"act\",{\"1\":{\"28\":3}}],[\"actions\",{\"1\":{\"29\":1}}],[\"actiontrial\",{\"1\":{\"29\":6}}],[\"action\",{\"1\":{\"28\":7,\"29\":1}}],[\"actioncall\",{\"1\":{\"13\":1,\"28\":2}}],[\"actionchannel\",{\"1\":{\"13\":1,\"19\":1,\"28\":1}}],[\"accesstoken\",{\"1\":{\"3\":1}}],[\"account\",{\"1\":{\"3\":1}}],[\"别忘了填写\",{\"1\":{\"3\":1}}],[\"修改生成的\",{\"1\":{\"3\":1}}],[\"后\",{\"1\":{\"3\":1}}],[\"快速创建一个空响应\",{\"1\":{\"38\":1}}],[\"快速创建对一条消息的空回复\",{\"1\":{\"34\":1}}],[\"快速部署\",{\"1\":{\"3\":1}}],[\"快速开始\",{\"0\":{\"2\":1},\"2\":{\"5\":1}}],[\"以及它如何被转换为纯文本\",{\"1\":{\"33\":1}}],[\"以方便\",{\"1\":{\"10\":1}}],[\"以\",{\"1\":{\"3\":1}}],[\"协议适配器\",{\"1\":{\"3\":1}}],[\"协议服务\",{\"0\":{\"3\":1}}],[\"仅支持\",{\"1\":{\"3\":1}}],[\"目前\",{\"1\":{\"3\":1}}],[\"配置一致\",{\"1\":{\"4\":1}}],[\"配置\",{\"0\":{\"3\":1},\"1\":{\"3\":1},\"2\":{\"6\":1}}],[\"4\",{\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"111\",{\"1\":{\"45\":2}}],[\"114514\",{\"1\":{\"29\":1}}],[\"123\",{\"1\":{\"34\":1,\"35\":1}}],[\"1\",{\"0\":{\"11\":1},\"1\":{\"2\":1,\"9\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"28\":1,\"29\":1,\"32\":1,\"38\":5,\"41\":1}}],[\"编写此文档时\",{\"1\":{\"2\":1,\"9\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"38\":1,\"41\":1}}],[\"注意\",{\"1\":{\"2\":1,\"3\":1,\"4\":1,\"9\":1,\"13\":1,\"14\":1,\"17\":1,\"22\":1,\"27\":1,\"32\":1,\"33\":1,\"38\":1,\"41\":1}}],[\"提示\",{\"1\":{\"2\":1,\"3\":2,\"4\":2,\"14\":1,\"28\":1,\"34\":1,\"35\":1,\"38\":2,\"43\":2,\"45\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
