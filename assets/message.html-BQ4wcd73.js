import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-PKT945-J.js";const p={};function i(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Messages are the most important part of chatbots, and all logic is based on message processing, so understanding message types is very important when writing plugins.</p><p>In <code>GoneBot</code>, we split a <code>message</code> into several <code>message segments</code>, each of which represents a special type of message, such as <code>text</code>, <code>image</code>, etc.</p><p>In <code>GoneBot</code>, the definition of message types is as follows:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// This describes a simple part of a message</span></span>
<span class="line"><span class="token keyword">type</span> MessageSegment <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Message type</span></span>
<span class="line">	Type <span class="token builtin">string</span> <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">	<span class="token comment">// Make sure it implements MessageType interface</span></span>
<span class="line">	Data MessageType <span class="token string">\`json:&quot;data&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Implement this to create a message type</span></span>
<span class="line"><span class="token keyword">type</span> MessageType <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Which adapter is this message for</span></span>
<span class="line">	<span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Which message type is this message for</span></span>
<span class="line">	<span class="token function">TypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Convert this message segment to raw text</span></span>
<span class="line">	<span class="token function">ToRawText</span><span class="token punctuation">(</span>msg MessageSegment<span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This describes the whole message</span></span>
<span class="line"><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Is the message to me?</span></span>
<span class="line">	IsToMe <span class="token builtin">bool</span></span>
<span class="line">	<span class="token comment">// Which group is it in?(Only useful with group message and notice)</span></span>
<span class="line">	Group <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who is sending this message?</span></span>
<span class="line">	Sender <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who is receiving this message?</span></span>
<span class="line">	Receiver <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who am i?</span></span>
<span class="line">	Self <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// All the message segments</span></span>
<span class="line">	segments <span class="token punctuation">[</span><span class="token punctuation">]</span>MessageSegment</span>
<span class="line">	<span class="token comment">// All the text segments are added together</span></span>
<span class="line">	rawText <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Among them, <code>segments</code> and <code>rawText</code> cannot be modified directly for you, you need to read them through <code>GetSegments()</code> and <code>GetRawText()</code>.</p><p><code>MessageType</code> defines the method of message type, and for a message type, it is important to know which adapter it belongs to (each adapter may implement different message types), its type name, and how it is converted to plain text (for message filtering, etc.).</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>After this, the messages received are all given by the adapter, so you don&#39;t need to care about where the message comes from, but only about the specific content of the message.</p></div><h2 id="message-construction" tabindex="-1"><a class="header-anchor" href="#message-construction"><span>Message Construction</span></a></h2><p>The construction method of messages is similar to <code>Rules</code>, you can use <code>message.NewReply()</code> to quickly create an empty reply to a message, or use <code>message.NewMessage()</code> to create a new message.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>When using <code>message.NewMessage()</code>, you may miss some fields that need to be specified. Therefore, it is not recommended to use <code>message.NewMessage()</code> before you are completely sure.</p></div><p><code>GoneBot</code> has built-in some simple and common message types:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Text attachs a plain text message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> TextType<span class="token punctuation">{</span></span>
<span class="line">			Text<span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Image attachs an image message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Image</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> ImageType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Voice attachs a voice message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Voice</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;voice&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> VoiceType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Video attachs a video message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Video</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;video&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> VideoType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// File attachs a file message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">File</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> FileType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use these methods to quickly add text, image, voice, video, and file messages to the message:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Like above, you can quickly create a reply that contains both text and images.</p><p>Of course, for the message type defined by the adapter, <code>GoneBot</code> naturally does not have the corresponding addition method, but you can add any message type using <code>Any()</code>:</p><p>For example, add a qq emoji to the message just now:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">        <span class="token function">Any</span><span class="token punctuation">(</span>onebotv11<span class="token punctuation">.</span>FaceType<span class="token punctuation">{</span> ID<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you already have two message bodies, and you want to concatenate them together, you can use <code>Join()</code> to connect the two messages together:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will create a reply that is exactly the same as the original message.</p><h2 id="message-sending" tabindex="-1"><a class="header-anchor" href="#message-sending"><span>Message Sending</span></a></h2><p>When you have constructed a message, you always want to send it out. In the <code>Handler</code>, <code>GoneBot</code> will pass in the adapter pointer, and you can judge the type of adapter and send messages through it:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Handler<span class="token punctuation">:</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>adapter<span class="token punctuation">.</span>Adapter<span class="token punctuation">,</span> msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> reply <span class="token operator">*</span>message<span class="token punctuation">.</span>Message</span>
<span class="line highlighted">  <span class="token keyword">if</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> onebotv11<span class="token punctuation">.</span>OneBotV11<span class="token punctuation">.</span>Name <span class="token punctuation">{</span></span>
<span class="line highlighted">    reply <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Any</span><span class="token punctuation">(</span>onebotv11<span class="token punctuation">.</span>FaceType<span class="token punctuation">{</span> ID<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    reply <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line highlighted">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You may find that the above code wrote <code>a.SendMessage(reply)</code> three times.</p><p>The plugins should be able to reply to multiple messages, why not?</p><p>So does the <code>CallAction()</code> in <a href="/zh/plugin/action">Adapter Actions</a>.</p></div>`,27)]))}const u=n(p,[["render",i],["__file","message.html.vue"]]),d=JSON.parse('{"path":"/guide/plugin/message.html","title":"Message Types","lang":"en-US","frontmatter":{"title":"Message Types","icon":"message","order":3,"category":["Documentation"],"tag":["Plugin","Message"],"author":"Kingcq"},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Message Construction","slug":"message-construction","link":"#message-construction","children":[]},{"level":2,"title":"Message Sending","slug":"message-sending","link":"#message-sending","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":2.65,"words":794},"filePathRelative":"guide/plugin/message.md","localizedDate":"December 5, 2024","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">Warning</p>\\n<p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p>\\n</div>\\n<h2>Introduction</h2>\\n<p>Messages are the most important part of chatbots, and all logic is based on message processing, so understanding message types is very important when writing plugins.</p>"}');export{u as comp,d as data};
