import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-PKT945-J.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p></div><p>本章节中，整理了一些适配器中常用的方法。</p><p><s>整理了一下，发现真的好少</s></p><h2 id="adapter-receivechannel-push-msg-true" tabindex="-1"><a class="header-anchor" href="#adapter-receivechannel-push-msg-true"><span><code>adapter.ReceiveChannel.Push(msg, true)</code></span></a></h2><p>将收到的已经规范化的消息推送到接收通道中，供 <code>GoneBot</code> 使用，第二个参数是 <code>isReceive</code>，因为 <code>SendChannel</code> 也在使用这个方法，只需要填写 <code>true</code> 即可</p><h2 id="adapter-sendchannel-pull-adapter-actionchannel-pull" tabindex="-1"><a class="header-anchor" href="#adapter-sendchannel-pull-adapter-actionchannel-pull"><span><code>adapter.SendChannel.Pull()</code>, <code>adapter.ActionChannel.Pull()</code></span></a></h2><p>分别从 <code>SendChannel</code> 和 <code>ActionChannel</code> 中取出一个消息或动作，用来处理，在没有消息或动作时会阻塞线程，直到有消息或动作再返回。</p><p><s>卧槽，没了</s></p><p>同时，对于消息段类型和事件类型，你需要实现对应的 MessageType 方法，以方便 <code>GoneBot</code> 处理：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// This describes a simple part of a message</span></span>
<span class="line"><span class="token keyword">type</span> MessageSegment <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Message type</span></span>
<span class="line">	Type <span class="token builtin">string</span> <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">	<span class="token comment">// Make sure it implements MessageType interface</span></span>
<span class="line">	Data MessageType <span class="token string">\`json:&quot;data&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Implement this to create a message type</span></span>
<span class="line"><span class="token keyword">type</span> MessageType <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Which adapter is this message for</span></span>
<span class="line">	<span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Which message type is this message for</span></span>
<span class="line">	<span class="token function">TypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Convert this message segment to raw text</span></span>
<span class="line">	<span class="token function">ToRawText</span><span class="token punctuation">(</span>msg MessageSegment<span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，<code>GoneBot</code> 内置的文本消息类型是这样实现的：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> TextType <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Text <span class="token builtin">string</span> <span class="token string">\`json:&quot;text&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>serializer TextType<span class="token punctuation">)</span> <span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>serializer TextType<span class="token punctuation">)</span> <span class="token function">TypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&quot;text&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>serializer TextType<span class="token punctuation">)</span> <span class="token function">ToRawText</span><span class="token punctuation">(</span>msg MessageSegment<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> msg<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token punctuation">(</span>TextType<span class="token punctuation">)</span><span class="token punctuation">.</span>Text</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const d=s(p,[["render",l],["__file","methods.html.vue"]]),u=JSON.parse('{"path":"/zh/guide/adapter/methods.html","title":"常用方法 & 约定","lang":"zh-CN","frontmatter":{"title":"常用方法 & 约定","icon":"meteor","order":3,"category":["文档"],"tag":["适配器","方法"],"author":"Kingcq"},"headers":[{"level":2,"title":"adapter.ReceiveChannel.Push(msg, true)","slug":"adapter-receivechannel-push-msg-true","link":"#adapter-receivechannel-push-msg-true","children":[]},{"level":2,"title":"adapter.SendChannel.Pull(), adapter.ActionChannel.Pull()","slug":"adapter-sendchannel-pull-adapter-actionchannel-pull","link":"#adapter-sendchannel-pull-adapter-actionchannel-pull","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733824016000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":2}]},"readingTime":{"minutes":1.07,"words":321},"filePathRelative":"zh/guide/adapter/methods.md","localizedDate":"2024年12月5日","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p>\\n</div>\\n<p>本章节中，整理了一些适配器中常用的方法。</p>\\n<p><s>整理了一下，发现真的好少</s></p>\\n<h2><code>adapter.ReceiveChannel.Push(msg, true)</code></h2>\\n<p>将收到的已经规范化的消息推送到接收通道中，供 <code>GoneBot</code> 使用，第二个参数是 <code>isReceive</code>，因为 <code>SendChannel</code> 也在使用这个方法，只需要填写 <code>true</code> 即可</p>"}');export{d as comp,u as data};
