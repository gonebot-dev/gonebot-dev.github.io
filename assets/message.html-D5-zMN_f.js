import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-D2fNj2_6.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p></div><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>消息是聊天机器人最为重要的部分，所有的逻辑都围绕消息处理展开，因此，了解消息类型对于编写插件非常重要。</p><p>在 <code>GoneBot</code> 中，我们将一段 <code>消息</code> 拆分为若干个 <code>消息段</code>，每个消息段代表一段特殊类型的消息，例如 文本<code>text</code>，图片<code>image</code> 等。</p><p>对于消息类型，<code>GoneBot</code> 的定义如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// This describes a simple part of a message</span></span>
<span class="line"><span class="token keyword">type</span> MessageSegment <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Message type</span></span>
<span class="line">	Type <span class="token builtin">string</span> <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">	<span class="token comment">// Make sure it implements MessageType interface</span></span>
<span class="line">	Data MessageType <span class="token string">\`json:&quot;data&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Implement this to create a message type</span></span>
<span class="line"><span class="token keyword">type</span> MessageType <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Which adapter is this message for</span></span>
<span class="line">	<span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Which message type is this message for</span></span>
<span class="line">	<span class="token function">TypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Convert this message segment to raw text</span></span>
<span class="line">	<span class="token function">ToRawText</span><span class="token punctuation">(</span>msg MessageSegment<span class="token punctuation">)</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This describes the whole message</span></span>
<span class="line"><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Is the message to me?</span></span>
<span class="line">	IsToMe <span class="token builtin">bool</span></span>
<span class="line">	<span class="token comment">// Which group is it in?(Only useful with group message and notice)</span></span>
<span class="line">	Group <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who is sending this message?</span></span>
<span class="line">	Sender <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who is receiving this message?</span></span>
<span class="line">	Receiver <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// Who am i?</span></span>
<span class="line">	Self <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// All the message segments</span></span>
<span class="line">	segments <span class="token punctuation">[</span><span class="token punctuation">]</span>MessageSegment</span>
<span class="line">	<span class="token comment">// All the text segments are added together</span></span>
<span class="line">	rawText <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>segments</code> 和 <code>rawText</code> 无法直接被你修改，你需要通过 <code>GetSegments()</code> 和 <code>GetRawText()</code> 来读取它们。</p><p><code>MessageType</code> 定义了消息类型的方法，对于一个消息类型，重要的是它所属的适配器（每个适配器可能会实现不同的消息类型），它的类型名称，以及它如何被转换为纯文本（用于消息筛选等）。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在这之后的内容，收到的消息都由适配器给出，因此，你无需关心消息从何而来，而只需关心消息的具体内容。</p></div><h2 id="消息构造" tabindex="-1"><a class="header-anchor" href="#消息构造"><span>消息构造</span></a></h2><p>消息的构造方式和 <code>Rules</code> 类似，你可以使用 <code>message.NewReply()</code> 快速创建对一条消息的空回复，也可以使用 <code>message.NewMessage()</code> 创建一条新的消息。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>message.NewMessage()</code> 时，你可能会漏掉一些需要指定的字段。</p><p>因此，在完全有把握之前，不推荐使用 <code>message.NewMessage()</code></p></div><p><code>GoneBot</code> 内置了一些简单、通用的消息类型：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Text attachs a plain text message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> TextType<span class="token punctuation">{</span></span>
<span class="line">			Text<span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Image attachs an image message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Image</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> ImageType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Voice attachs a voice message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Voice</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;voice&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> VoiceType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Video attachs a video message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Video</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;video&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> VideoType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// File attachs a file message segment to message</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">File</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span></span>
<span class="line">	m<span class="token punctuation">.</span><span class="token function">AttachSegment</span><span class="token punctuation">(</span>MessageSegment<span class="token punctuation">{</span></span>
<span class="line">		Type<span class="token punctuation">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Data<span class="token punctuation">:</span> FileType<span class="token punctuation">{</span></span>
<span class="line">			File<span class="token punctuation">:</span> file<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> m</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以直接在 <code>message</code> 中添加并连接它们：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像上面这样，你就能快速创建一个同时包含文本和图片的回复。</p><p>当然，对于适配器定义的消息类型，<code>GoneBot</code> 自然不会有对应的添加方法，但你可以通过 <code>Any()</code> 来添加任意的消息类型：</p><p>例如，像这样为刚刚的消息添加一个 qq 表情：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">        <span class="token function">Any</span><span class="token punctuation">(</span>onebotv11<span class="token punctuation">.</span>FaceType<span class="token punctuation">{</span> ID<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你已经得到了两个现成的消息体，想把它们连在一起，你可以使用 <code>Join()</code> 来连接两条消息：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">reply <span class="token operator">:=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就能创建一条与原消息完全一样的回复。</p><h2 id="消息发送" tabindex="-1"><a class="header-anchor" href="#消息发送"><span>消息发送</span></a></h2><p>当你构造好一条消息，你总是希望将消息发出去。在 <code>Handler</code> 中，<code>GoneBot</code> 会传入适配器指针，你可以通过它来判断适配器类型和发送消息：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Handler<span class="token punctuation">:</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>adapter<span class="token punctuation">.</span>Adapter<span class="token punctuation">,</span> msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> reply <span class="token operator">*</span>message<span class="token punctuation">.</span>Message</span>
<span class="line highlighted">  <span class="token keyword">if</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> onebotv11<span class="token punctuation">.</span>OneBotV11<span class="token punctuation">.</span>Name <span class="token punctuation">{</span></span>
<span class="line highlighted">    reply <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Any</span><span class="token punctuation">(</span>onebotv11<span class="token punctuation">.</span>FaceType<span class="token punctuation">{</span> ID<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line highlighted">            <span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;https://ecosystem.vuejs.press/images/hero.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    reply <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line highlighted">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可能会发现上面的连续写了三次 <code>a.SendMessage(reply)</code></p><p>插件就应该能连续回复多个消息，为什么不呢？</p><p>之后的 <a href="/zh/plugin/action">适配器行为</a> 中的 <code>CallAction()</code> 也是一样。</p></div>`,27)]))}const u=s(p,[["render",i],["__file","message.html.vue"]]),d=JSON.parse('{"path":"/zh/guide/plugin/message.html","title":"消息类型","lang":"zh-CN","frontmatter":{"title":"消息类型","icon":"message","order":3,"category":["文档"],"tag":["插件","消息"],"author":"Kingcq"},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"消息构造","slug":"消息构造","link":"#消息构造","children":[]},{"level":2,"title":"消息发送","slug":"消息发送","link":"#消息发送","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":3.35,"words":1004},"filePathRelative":"zh/guide/plugin/message.md","localizedDate":"2024年12月5日","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p>\\n</div>\\n<h2>简介</h2>\\n<p>消息是聊天机器人最为重要的部分，所有的逻辑都围绕消息处理展开，因此，了解消息类型对于编写插件非常重要。</p>\\n<p>在 <code>GoneBot</code> 中，我们将一段 <code>消息</code> 拆分为若干个 <code>消息段</code>，每个消息段代表一段特殊类型的消息，例如 文本<code>text</code>，图片<code>image</code> 等。</p>"}');export{u as comp,d as data};
