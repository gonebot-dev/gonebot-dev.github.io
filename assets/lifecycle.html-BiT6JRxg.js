import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as o,o as n}from"./app-D2fNj2_6.js";const s={};function i(d,e){return n(),a("div",null,e[0]||(e[0]=[o('<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p></div><p>In <code>GoneBot</code> Adapter, the lifecycle is very simple, start, and end. That is, the start and destruction of the adapter.</p><p>In terms of definition, the adapter needs to implement the <code>Start</code> method and the <code>Finalize</code> method. These two methods do not require any parameters. The <code>Start</code> method will be started by <code>goroutine</code>, and the adapter should start its own business logic in the <code>Start</code> method. The <code>Finalize</code> method will be called when <code>GoneBot</code> is closed, and the adapter should release resources in this method to prevent leakage.</p><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>Start</span></a></h2><p>After the <code>Start</code> method is started, the adapter has some work to do to facilitate <code>GoneBot</code> to work properly:</p><ul><li><h3 id="_1-start-message-reception" tabindex="-1"><a class="header-anchor" href="#_1-start-message-reception"><span>1. Start message reception</span></a></h3></li></ul><p>â€ƒâ€ƒThe adapter should receive messages from the chat platform in its own way, convert the messages to the <code>Message</code> type specified by <code>GoneBot</code>, and use <code>ReceiveChannel.Push(msg, true)</code> to put the message into the adapter&#39;s message reception queue. <code>GoneBot</code> will take the message from this queue and pass it to the plugin.</p><ul><li><h3 id="_2-start-message-sending" tabindex="-1"><a class="header-anchor" href="#_2-start-message-sending"><span>2. Start message sending</span></a></h3></li></ul><p>â€ƒâ€ƒAfter the plugin is processed, the plugin&#39;s reply will be pushed into the adapter&#39;s send message queue <code>SendChannel</code>, and the adapter needs to send these replies to the chat platform in its own way.</p><ul><li><h3 id="_3-start-behavior-listening" tabindex="-1"><a class="header-anchor" href="#_3-start-behavior-listening"><span>3. Start behavior listening</span></a></h3></li></ul><p>â€ƒâ€ƒIf the chat platform implements some custom behavior (such as QQ&#39;s poke), the plugin may generate some behavior calls, <code>GoneBot</code> will put these calls into the adapter&#39;s <code>ActionChannel</code>, and the adapter needs to handle these behaviors and put the processing results into the <code>ResultChannel</code> specified by the <code>ActionCall</code>.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Regardless of the result of the call, you need to push at least one result into <code>ResultChannel</code>, otherwise the plugin that calls the behavior will be stuck in place!</p><p>I warn you! ðŸ«µðŸ«µðŸ«µ</p></div><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end"><span>End</span></a></h2><p>When <code>GoneBot</code> is closed, the <code>Finalize</code> method of all adapters will be called in turn. The adapter should release all resources in this method to prevent leakage.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>But this does not mean you can block the thread at will! Otherwise, it will cause <code>GoneBot</code> to be unable to close properly!</p></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Until version <code>v1.1.4</code>, <code>GoneBot</code> cannot exit properly when the user uses <code>Ctrl+C</code>. In the subsequent versions, <code>GoneBot</code> will try to fix this problem.</p></div>',16)]))}const l=t(s,[["render",i],["__file","lifecycle.html.vue"]]),h=JSON.parse('{"path":"/guide/adapter/lifecycle.html","title":"Life Cycle","lang":"en-US","frontmatter":{"title":"Life Cycle","icon":"heart-pulse","order":2,"category":["Documentation"],"tag":["Adapter","Life Cycle"],"author":"Kingcq"},"headers":[{"level":2,"title":"Start","slug":"start","link":"#start","children":[]},{"level":2,"title":"End","slug":"end","link":"#end","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":1.35,"words":405},"filePathRelative":"guide/adapter/lifecycle.md","localizedDate":"December 5, 2024","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">Warning</p>\\n<p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p>\\n</div>\\n<p>In <code>GoneBot</code> Adapter, the lifecycle is very simple, start, and end. That is, the start and destruction of the adapter.</p>"}');export{l as comp,h as data};
