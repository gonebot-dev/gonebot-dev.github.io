import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-DrX2Z_hR.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>The way of writing rules in <code>GoneBot</code> is very simple, but it is still very powerful and can meet various complex rule requirements.</p><p>You can use <code>rule.NewRule()</code> to create a new response rule group, you must specify the first rule for the rule group, if you don&#39;t need to add rules, you can use <code>rule.NewRule(rule.Always())</code> to make the responder always respond to the received messages.</p><h2 id="built-in-rules" tabindex="-1"><a class="header-anchor" href="#built-in-rules"><span>Built-in Rules</span></a></h2><p><code>GoneBot</code> provides a set of built-in rules that you can use directly to create rule groups:</p><p><code>rule.Always()</code> always returns <code>true</code>, that is, always respond to the received messages.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Always always returns true</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Always</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Never()</code> always returns <code>false</code>, that is, never respond to the received messages.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Never never returns true</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Never</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Command()</code> returns <code>true</code> when the message starts with <code>COMMAND_START</code> plus any of the specified commands.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Command</span><span class="token punctuation">(</span>prefixList <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> prefix <span class="token operator">:=</span> <span class="token keyword">range</span> prefixList <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span></span>
<span class="line">					msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">					configurations<span class="token punctuation">.</span><span class="token function">GetConf</span><span class="token punctuation">(</span><span class="token string">&quot;COMMAND_START&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>prefix<span class="token punctuation">,</span></span>
<span class="line">				<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>COMMAND_START</code> is specified in the <code>.env</code> file, the default is <code>/</code></p><p>You can add multiple prefixes to <code>prefixList</code>, and the responder will respond to the message if it starts with <code>COMMAND_START</code> plus any of the specified prefixes.</p></div><p><code>rule.FullMatch()</code> returns <code>true</code> when the message matches any of the specified strings.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">FullMatch</span><span class="token punctuation">(</span>strs <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> str <span class="token operator">:=</span> <span class="token keyword">range</span> strs <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> str <span class="token operator">==</span> msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Keyword()</code> returns <code>true</code> when the message contains any of the specified strings.</p><p>If <code>forceStart</code> is <code>true</code>, the specified string must be at the beginning of the message.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Keyword</span><span class="token punctuation">(</span>forceStart <span class="token builtin">bool</span><span class="token punctuation">,</span> keywords <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> keyword <span class="token operator">:=</span> <span class="token keyword">range</span> keywords <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> forceStart <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token operator">!</span>forceStart <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.RegEx()</code> allows you to pass in several regular expression strings, and if the message matches any of them, it will return <code>true</code>.</p><p>Also, regular expressions may compile errors, in order to get clearer error information, you need to pass in the plugin name to mark the plugin that uses this rule.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">RegEx</span><span class="token punctuation">(</span>pluginName <span class="token builtin">string</span><span class="token punctuation">,</span> exprs <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> expr <span class="token operator">:=</span> <span class="token keyword">range</span> exprs <span class="token punctuation">{</span></span>
<span class="line">				reg<span class="token punctuation">,</span> err <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span></span>
<span class="line">				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">					log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[GONEBOT] | %s: RegEx filter rule compilation error!\\n&quot;</span><span class="token punctuation">,</span> pluginName<span class="token punctuation">)</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">if</span> reg<span class="token punctuation">.</span><span class="token function">FindStringIndex</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.ToMe()</code> returns <code>true</code> when the <code>IsToMe</code> field in the message body is <code>true</code>.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">ToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> msg<span class="token punctuation">.</span>IsToMe</span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>IsToMe</code> is determined by the adapter, for example, in the QQ robot, if the message starts with <code>@robotQQ</code> or there is an event targeting the robot (such as a poke), <code>IsToMe</code> is <code>true</code>.</p></div><p><code>rule.OfType()</code> returns <code>true</code> when the <code>Type</code> field and <code>AdapterName</code> field of the first segment of the message body match the specified strings.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">OfType</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> adapterName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Type <span class="token operator">==</span> typeName <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> adapterName</span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Notice()</code> returns <code>true</code> when the message contains any of the specified types.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Notice</span><span class="token punctuation">(</span>typeList <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> typeName <span class="token operator">:=</span> <span class="token keyword">range</span> typeList <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> segment <span class="token operator">:=</span> <span class="token keyword">range</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">if</span> segment<span class="token punctuation">.</span>Type <span class="token operator">==</span> typeName <span class="token punctuation">{</span></span>
<span class="line">						<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-rules" tabindex="-1"><a class="header-anchor" href="#custom-rules"><span>Custom Rules</span></a></h2><p>If the built-in rules do not meet your requirements, you can customize rules by creating a new <code>*rule.Rule</code> type like this:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Rules<span class="token punctuation">:</span> rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rule<span class="token punctuation">.</span>Rule<span class="token punctuation">{</span></span>
<span class="line">  Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;miao~&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This creates a rule that checks if the end of the message is <code>miao~</code>, and only triggers when the message is <code>IsToMe</code>.</p><h2 id="connecting-rules" tabindex="-1"><a class="header-anchor" href="#connecting-rules"><span>Connecting Rules</span></a></h2><p><code>rule.NewRule()</code> creates a rule block, which can contain multiple rules, which can be connected using <code>And()</code> and <code>Or()</code>, and the rules will be calculated in the order of connection, and the result will be obtained at the end.</p><p>If you need to connect multiple rules, you can use <code>rule.AndRules()</code> and <code>rule.OrRules()</code> to connect a new rule block, the calculation rules are the same.</p><p>For example, you need your robot to respond to <code>@self</code> and contain <code>111</code> messages, or to respond to your own poke messages:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Rules<span class="token punctuation">:</span> rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">Keyword</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">      <span class="token function">AndRules</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">Notice</span><span class="token punctuation">(</span><span class="token string">&quot;group_poke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;friend_poke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Rules connected like this may be quite long, and you can insert more line breaks to make it easier to read.</p></div>`,38)]))}const u=s(p,[["render",o],["__file","rule.html.vue"]]),r=JSON.parse('{"path":"/guide/plugin/rule.html","title":"Handler Rules","lang":"en-US","frontmatter":{"title":"Handler Rules","icon":"ruler","order":2,"category":["Documentation"],"tag":["Plugin","Rules"],"author":"Kingcq"},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Built-in Rules","slug":"built-in-rules","link":"#built-in-rules","children":[]},{"level":2,"title":"Custom Rules","slug":"custom-rules","link":"#custom-rules","children":[]},{"level":2,"title":"Connecting Rules","slug":"connecting-rules","link":"#connecting-rules","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":2.64,"words":792},"filePathRelative":"guide/plugin/rule.md","localizedDate":"December 5, 2024","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">Warning</p>\\n<p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p>\\n</div>\\n<h2>Introduction</h2>\\n<p>The way of writing rules in <code>GoneBot</code> is very simple, but it is still very powerful and can meet various complex rule requirements.</p>"}');export{u as comp,r as data};
