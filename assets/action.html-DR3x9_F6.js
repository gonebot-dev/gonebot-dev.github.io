import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-DrX2Z_hR.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>For adapters, they may define behaviors specific to a platform (such as QQ pokes, merge forwards, etc.), which cannot be represented by message types, but they exist and may be very useful, so <code>GoneBot</code> also created corresponding interfaces, and responders can try to let the adapter execute it defined behavior.</p><p>The interface definition of adapter behavior is as follows:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// If you want to call adapter action, you should use this struct</span></span>
<span class="line"><span class="token keyword">type</span> ActionCall <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Which action</span></span>
<span class="line">	Action any</span>
<span class="line">	<span class="token comment">// Which channel to push the result, will initialize automatically</span></span>
<span class="line">	ResultChannel <span class="token operator">*</span><span class="token keyword">chan</span> any</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For adapters, we provide the <code>CallAction</code> method to call the adapter behavior:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Adapter<span class="token punctuation">)</span> <span class="token function">CallAction</span><span class="token punctuation">(</span>action any<span class="token punctuation">)</span> <span class="token punctuation">(</span>result any<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	act <span class="token operator">:=</span> message<span class="token punctuation">.</span>ActionCall<span class="token punctuation">{</span>Action<span class="token punctuation">:</span> action<span class="token punctuation">}</span></span>
<span class="line">	resultChannel <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> any<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	act<span class="token punctuation">.</span>ResultChannel <span class="token operator">=</span> <span class="token operator">&amp;</span>resultChannel</span>
<span class="line">	a<span class="token punctuation">.</span>ActionChannel<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&lt;-</span>resultChannel</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If adapter does not return result to <code>resultChannel</code>, <code>CallAction</code> will be blocked and stuck in the current responder, if you find this situation, please check whether the <code>Action</code> you call is correct.</p><p>If it is actually a problem with the adapter, Man! What can I say.</p></div><h2 id="adapter-behavior-call" tabindex="-1"><a class="header-anchor" href="#adapter-behavior-call"><span>Adapter behavior call</span></a></h2><p>In the case that the adapter has implemented the corresponding behavior, you can use the <code>CallAction</code> method to call it.</p><p>For example, in the OneBotV11 adapter, you can call the <code>CallAction</code> method to send a private message when the user sends a text containing <code>test</code> to the robot:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> ActionTrial plugin<span class="token punctuation">.</span>GonePlugin</span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  ActionTrial<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Action Trial&quot;</span></span>
<span class="line">  ActionTrial<span class="token punctuation">.</span>Version <span class="token operator">=</span> <span class="token string">&quot;v0.0.1&quot;</span></span>
<span class="line">  ActionTrial<span class="token punctuation">.</span>Description <span class="token operator">=</span> <span class="token string">&quot;A plugin for testing actions&quot;</span></span>
<span class="line"></span>
<span class="line">  ActionTrial<span class="token punctuation">.</span>Handlers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ActionTrial<span class="token punctuation">.</span>Handlers<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span>GoneHandler<span class="token punctuation">{</span></span>
<span class="line">    Rules<span class="token punctuation">:</span> rule<span class="token punctuation">.</span><span class="token function">NewRules</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">ToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">Keyword</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    Handler<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token operator">*</span>adapter<span class="token punctuation">.</span>Adapter<span class="token punctuation">,</span> msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">      a<span class="token punctuation">.</span><span class="token function">CallAction</span><span class="token punctuation">(</span>onebotv11<span class="token punctuation">.</span>SendPrivateMessage<span class="token punctuation">{</span></span>
<span class="line">        UserID<span class="token punctuation">:</span>  <span class="token number">114514</span><span class="token punctuation">,</span></span>
<span class="line">        Message<span class="token punctuation">:</span> message<span class="token punctuation">.</span><span class="token function">NewReply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const u=s(p,[["render",o],["__file","action.html.vue"]]),r=JSON.parse('{"path":"/guide/plugin/action.html","title":"Adapter Actions","lang":"en-US","frontmatter":{"title":"Adapter Actions","icon":"person-running","order":4,"category":["Documentation"],"tag":["Plugin","Actions"],"author":"Kingcq"},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Adapter behavior call","slug":"adapter-behavior-call","link":"#adapter-behavior-call","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":1.01,"words":303},"filePathRelative":"guide/plugin/action.md","localizedDate":"December 5, 2024","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">Warning</p>\\n<p>When writing this document, the <code>GoneBot</code> version was <code>v1.1.4</code></p>\\n</div>\\n<h2>Introduction</h2>\\n<p>For adapters, they may define behaviors specific to a platform (such as QQ pokes, merge forwards, etc.), which cannot be represented by message types, but they exist and may be very useful, so <code>GoneBot</code> also created corresponding interfaces, and responders can try to let the adapter execute it defined behavior.</p>"}');export{u as comp,r as data};
