import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-D2fNj2_6.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p></div><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>响应器规则的写法非常简洁，但它仍然功能齐全，能满足各种复杂的规则需求。</p><p>你可以使用 <code>rule.NewRule()</code> 来创建一个新的响应规则组，你必须为规则组指定第一个规则，如果你不需要添加规则，你可以使用 <code>rule.NewRule(rule.Always())</code> 来让响应器始终响应收到的消息。</p><h2 id="内置规则" tabindex="-1"><a class="header-anchor" href="#内置规则"><span>内置规则</span></a></h2><p><code>GoneBot</code> 内置了一系列常用的规则，你可以直接使用它们来创建规则组：</p><p><code>rule.Always()</code> 始终返回 <code>true</code>，即始终响应收到的消息。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Always always returns true</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Always</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Never()</code> 始终返回 <code>false</code>，即始终不响应收到的消息。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Never never returns true</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Never</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Command()</code> 在消息开头包含 <code>COMMAND_START</code> 加上其中指定的任一命令时返回 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Command</span><span class="token punctuation">(</span>prefixList <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> prefix <span class="token operator">:=</span> <span class="token keyword">range</span> prefixList <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span></span>
<span class="line">					msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">					configurations<span class="token punctuation">.</span><span class="token function">GetConf</span><span class="token punctuation">(</span><span class="token string">&quot;COMMAND_START&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>prefix<span class="token punctuation">,</span></span>
<span class="line">				<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>COMMAND_START</code> 在 <code>.env</code> 文件中指定，默认为 <code>/</code></p><p>在 <code>rule.Command()</code> 中可以填入若干条字符串，只要消息开头包含 <code>COMMAND_START</code>+其中任一字符串，就会返回 <code>true</code>，之后的一些内置响应规则也是如此。</p></div><p><code>rule.FullMatch()</code> 在消息完全匹配指定的若干条字符串时返回 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">FullMatch</span><span class="token punctuation">(</span>strs <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> str <span class="token operator">:=</span> <span class="token keyword">range</span> strs <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> str <span class="token operator">==</span> msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Keyword()</code> 在消息中包含指定的若干条字符串中的任一条时返回 <code>true</code>。</p><p>如果 <code>forceStart</code> 为 <code>true</code>，则要求消息中包含的该字符串一定要在消息的开头。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Keyword</span><span class="token punctuation">(</span>forceStart <span class="token builtin">bool</span><span class="token punctuation">,</span> keywords <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> keyword <span class="token operator">:=</span> <span class="token keyword">range</span> keywords <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">if</span> forceStart <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token operator">!</span>forceStart <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.RegEx()</code> 允许你传入若干个正则表达式字符串，只要消息能被其中任一正则表达式匹配，就会返回 <code>true</code>。</p><p>同时，正则表达式可能会编译错误，为了更清晰的错误信息，你需要传入插件名称来标记使用该规则的插件。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">RegEx</span><span class="token punctuation">(</span>pluginName <span class="token builtin">string</span><span class="token punctuation">,</span> exprs <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> expr <span class="token operator">:=</span> <span class="token keyword">range</span> exprs <span class="token punctuation">{</span></span>
<span class="line">				reg<span class="token punctuation">,</span> err <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span></span>
<span class="line">				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">					log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[GONEBOT] | %s: RegEx filter rule compilation error!\\n&quot;</span><span class="token punctuation">,</span> pluginName<span class="token punctuation">)</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">if</span> reg<span class="token punctuation">.</span><span class="token function">FindStringIndex</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.ToMe()</code> 在消息体的 <code>IsToMe</code> 字段为 <code>true</code> 时返回 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">ToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> msg<span class="token punctuation">.</span>IsToMe</span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>IsToMe</code> 字段由适配器决定，例如在 QQ 机器人中，如果消息开头包含 <code>@机器人QQ号</code>，或者有事件是针对机器人的（如戳一戳），则 <code>IsToMe</code> 为 <code>true</code>。</p></div><p><code>rule.OfType()</code> 在消息段的第一段的 <code>Type</code> 字段和 <code>AdapterName</code> 字段都匹配指定的字符串时返回 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">OfType</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> adapterName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Type <span class="token operator">==</span> typeName <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">AdapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> adapterName</span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rule.Notice()</code> 在消息中包含指定的若干类型中的任一种时返回 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Notice</span><span class="token punctuation">(</span>typeList <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Rule <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Rule<span class="token punctuation">{</span></span>
<span class="line">		Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> typeName <span class="token operator">:=</span> <span class="token keyword">range</span> typeList <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> segment <span class="token operator">:=</span> <span class="token keyword">range</span> msg<span class="token punctuation">.</span><span class="token function">GetSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					<span class="token keyword">if</span> segment<span class="token punctuation">.</span>Type <span class="token operator">==</span> typeName <span class="token punctuation">{</span></span>
<span class="line">						<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义规则" tabindex="-1"><a class="header-anchor" href="#自定义规则"><span>自定义规则</span></a></h2><p>如果内置规则不能满足你的要求，你可以自定义规则，只需要像这样创建一个新的 <code>*rule.Rule</code> 类型就可以：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Rules<span class="token punctuation">:</span> rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rule<span class="token punctuation">.</span>Rule<span class="token punctuation">{</span></span>
<span class="line">  Filter<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRawText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;喵～&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就创建了一个检测消息末尾是否为 <code>喵～</code> 的规则，并且只有当消息是 <code>IsToMe</code> 时才会触发。</p><h2 id="连接规则" tabindex="-1"><a class="header-anchor" href="#连接规则"><span>连接规则</span></a></h2><p><code>rule.NewRule()</code> 创建了一个规则块，其中可以包含多个规则，它们之间可以使用 <code>And()</code> 和 <code>Or()</code> 来连接，这些规则会按照连接顺序依次运算，最后得到结果。</p><p>如果你需要多个规则块协同运作，你可以使用 <code>rule.AndRules()</code> 和 <code>rule.OrRules()</code> 来为规则块连接一个新的规则块，运算规则同理。</p><p>例如，你需要你的机器人响应 <code>@自己</code> 并且包含 <code>111</code> 的消息，或者是针对自己的戳一戳消息：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">Rules<span class="token punctuation">:</span> rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">Keyword</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">      <span class="token function">AndRules</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">NewRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">IsToMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">Notice</span><span class="token punctuation">(</span><span class="token string">&quot;group_poke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;friend_poke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这样构造的规则可能会很长，可以适当换行以更清楚的区分各规则块。</p></div>`,38)]))}const u=s(p,[["render",o],["__file","rule.html.vue"]]),r=JSON.parse('{"path":"/zh/guide/plugin/rule.html","title":"响应器规则","lang":"zh-CN","frontmatter":{"title":"响应器规则","icon":"ruler","order":2,"category":["文档"],"tag":["插件","规则"],"author":"Kingcq"},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"内置规则","slug":"内置规则","link":"#内置规则","children":[]},{"level":2,"title":"自定义规则","slug":"自定义规则","link":"#自定义规则","children":[]},{"level":2,"title":"连接规则","slug":"连接规则","link":"#连接规则","children":[]}],"git":{"createdTime":1733397969000,"updatedTime":1733397969000,"contributors":[{"name":"Kingcq","email":"404291187@qq.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"zh/guide/plugin/rule.md","localizedDate":"2024年12月5日","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>编写此文档时，<code>GoneBot</code> 版本为 <code>v1.1.4</code></p>\\n</div>\\n<h2>简介</h2>\\n<p>响应器规则的写法非常简洁，但它仍然功能齐全，能满足各种复杂的规则需求。</p>\\n<p>你可以使用 <code>rule.NewRule()</code> 来创建一个新的响应规则组，你必须为规则组指定第一个规则，如果你不需要添加规则，你可以使用 <code>rule.NewRule(rule.Always())</code> 来让响应器始终响应收到的消息。</p>"}');export{u as comp,r as data};
